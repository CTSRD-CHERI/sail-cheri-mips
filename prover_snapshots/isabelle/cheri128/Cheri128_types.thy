chapter \<open>Generated by Lem from \<open>cheri128_types.lem\<close>.\<close>

theory "Cheri128_types" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "Sail.Sail2_instr_kinds"
  "Sail.Sail2_values"
  "Sail.Sail2_string"
  "Sail.Sail2_operators_mwords"
  "Sail.Sail2_prompt_monad"
  "Sail.Sail2_prompt"

begin 

\<comment> \<open>\<open>Generated by Sail from cheri128.\<close>\<close>
\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Sail2_instr_kinds\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_string\<close>\<close>
\<comment> \<open>\<open>open import Sail2_operators_mwords\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt_monad\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt\<close>\<close>
type_synonym 'n bits =" ( 'n::len)Word.word "



datatype exception  =
    ISAException " (unit)"
  | Error_not_implemented " (string)"
  | Error_misaligned_access " (unit)"
  | Error_EBREAK " (unit)"
  | Error_internal_error " (unit)"



record CauseReg  = 
 CauseReg_bits ::"  32 Word.word "  



record CapCauseReg  = 
 CapCauseReg_bits ::"  16 Word.word "  



record ContextReg  = 
 ContextReg_bits ::"  64 Word.word "  



record StatusReg  = 
 StatusReg_bits ::"  32 Word.word "  



record TLBEntryHiReg  = 
 TLBEntryHiReg_bits ::"  64 Word.word "  



record TLBEntryLoReg  = 
 TLBEntryLoReg_bits ::"  64 Word.word "  



record TLBEntry  = 
 TLBEntry_bits ::"  119 Word.word "  



record XContextReg  = 
 XContextReg_bits ::"  64 Word.word "  



type_synonym TLBIndexT  =" 6 bits "

datatype Exception =
    Interrupt
  | TLBMod
  | TLBL
  | TLBS
  | AdEL
  | AdES
  | Sys
  | Bp
  | ResI
  | CpU
  | Ov
  | Tr
  | C2E
  | C2Trap
  | XTLBRefillL
  | XTLBRefillS
  | XTLBInvL
  | XTLBInvS
  | MCheck



record Capability  =
  
 Capability_tag ::" bool " 

     Capability_uperms ::" 4 bits " 

     Capability_permit_set_CID ::" bool " 

     Capability_access_system_regs ::" bool " 

     Capability_permit_unseal ::" bool " 

     Capability_permit_ccall ::" bool " 

     Capability_permit_seal ::" bool " 

     Capability_permit_store_local_cap ::" bool " 

     Capability_permit_store_cap ::" bool " 

     Capability_permit_load_cap ::" bool " 

     Capability_permit_store ::" bool " 

     Capability_permit_load ::" bool " 

     Capability_permit_execute ::" bool " 

     Capability_global ::" bool " 

     Capability_reserved ::" 3 bits " 

     Capability_internal_e ::" bool " 

     Capability_E ::" 6 bits " 

     Capability_sealed ::" bool " 

     Capability_B ::" 14 bits " 

     Capability_T ::" 14 bits " 

     Capability_otype ::" 18 bits " 

     Capability_address ::" 64 bits "  



datatype MemAccessType =   Instruction | LoadData | StoreData



datatype MemAccessCapRestriction =   Unrestricted | Trap | Clear



datatype AccessLevel =   User | Supervisor | Kernel



datatype CapEx =
    CapEx_None
  | CapEx_LengthViolation
  | CapEx_TagViolation
  | CapEx_SealViolation
  | CapEx_TypeViolation
  | CapEx_CallTrap
  | CapEx_ReturnTrap
  | CapEx_TSSUnderFlow
  | CapEx_UserDefViolation
  | CapEx_TLBNoStoreCap
  | CapEx_InexactBounds
  | CapEx_GlobalViolation
  | CapEx_PermitExecuteViolation
  | CapEx_PermitLoadViolation
  | CapEx_PermitStoreViolation
  | CapEx_PermitLoadCapViolation
  | CapEx_PermitStoreCapViolation
  | CapEx_PermitStoreLocalCapViolation
  | CapEx_PermitSealViolation
  | CapEx_AccessSystemRegsViolation
  | CapEx_PermitCCallViolation
  | CapEx_AccessCCallIDCViolation
  | CapEx_PermitUnsealViolation
  | CapEx_PermitSetCIDViolation
  | CapEx_TLBLoadCap



type_synonym regno  =" 5 bits "

type_synonym IntRegEnc  =" 5 bits "

type_synonym imm16  =" 16 bits "

datatype decode_failure =
    No_matching_pattern | Unsupported_instruction | Illegal_instruction | Internal_error



datatype Comparison =   EQ' | NE | GE | GEU | GT' | LE | LT' | LTU



datatype WordType =   B | H | W | D



datatype WordTypeUnaligned =   WL | WR | DL | DR



type_synonym CapLen  =" int "

type_synonym uint64  =" int "

datatype CPtrCmpOp =   CEQ | CNE | CLT | CLE | CLTU | CLEU | CEXEQ | CNEXEQ



datatype ClearRegSet =   GPLo | GPHi | CLo | CHi





type_synonym CFlags  =" 1 bits "

type_synonym CapBits  =" 128 bits "

type_synonym CapRegEnc  =" 5 bits "

type_synonym CapRegOrDDCEnc  =" 5 bits "

type_synonym CapHwrEnc  =" 5 bits "

datatype (plugins only: size) ast  =
    DADDIU " ((regno * regno * imm16))"
  | DADDU " ((regno * regno * regno))"
  | DADDI " ((regno * regno * 16 bits))"
  | DADD " ((regno * regno * regno))"
  | ADD " ((regno * regno * regno))"
  | ADDI " ((regno * regno * 16 bits))"
  | ADDU " ((regno * regno * regno))"
  | ADDIU " ((regno * regno * 16 bits))"
  | DSUBU " ((regno * regno * regno))"
  | DSUB " ((regno * regno * regno))"
  | SUB " ((regno * regno * regno))"
  | SUBU " ((regno * regno * regno))"
  | AND0 " ((regno * regno * regno))"
  | ANDI " ((regno * regno * 16 bits))"
  | OR0 " ((regno * regno * regno))"
  | ORI " ((regno * regno * 16 bits))"
  | NOR " ((regno * regno * regno))"
  | XOR0 " ((regno * regno * regno))"
  | XORI " ((regno * regno * 16 bits))"
  | LUI " ((regno * imm16))"
  | DSLL " ((regno * regno * regno))"
  | DSLL32 " ((regno * regno * regno))"
  | DSLLV " ((regno * regno * regno))"
  | DSRA " ((regno * regno * regno))"
  | DSRA32 " ((regno * regno * regno))"
  | DSRAV " ((regno * regno * regno))"
  | DSRL " ((regno * regno * regno))"
  | DSRL32 " ((regno * regno * regno))"
  | DSRLV " ((regno * regno * regno))"
  | SLL " ((regno * regno * regno))"
  | SLLV " ((regno * regno * regno))"
  | SRA " ((regno * regno * regno))"
  | SRAV " ((regno * regno * regno))"
  | SRL " ((regno * regno * regno))"
  | SRLV " ((regno * regno * regno))"
  | SLT " ((regno * regno * regno))"
  | SLTI " ((regno * regno * 16 bits))"
  | SLTU " ((regno * regno * regno))"
  | SLTIU " ((regno * regno * 16 bits))"
  | MOVN " ((regno * regno * regno))"
  | MOVZ " ((regno * regno * regno))"
  | MFHI " (regno)"
  | MFLO " (regno)"
  | MTHI " (regno)"
  | MTLO " (regno)"
  | MUL " ((regno * regno * regno))"
  | MULT " ((regno * regno))"
  | MULTU " ((regno * regno))"
  | DMULT " ((regno * regno))"
  | DMULTU " ((regno * regno))"
  | MADD " ((regno * regno))"
  | MADDU " ((regno * regno))"
  | MSUB " ((regno * regno))"
  | MSUBU " ((regno * regno))"
  | DIV " ((regno * regno))"
  | DIVU " ((regno * regno))"
  | DDIV " ((regno * regno))"
  | DDIVU " ((regno * regno))"
  | J " ( 26 bits)"
  | JAL " ( 26 bits)"
  | JR " (regno)"
  | JALR " ((regno * regno))"
  | BEQ " ((regno * regno * imm16 * bool * bool))"
  | BCMPZ " ((regno * imm16 * Comparison * bool * bool))"
  | SYSCALL " (unit)"
  | BREAK " (unit)"
  | WAIT " (unit)"
  | TRAPREG " ((regno * regno * Comparison))"
  | TRAPIMM " ((regno * imm16 * Comparison))"
  | Load " ((WordType * bool * bool * regno * regno * imm16))"
  | Store " ((WordType * bool * regno * regno * imm16))"
  | LWL " ((regno * regno * 16 bits))"
  | LWR " ((regno * regno * 16 bits))"
  | SWL " ((regno * regno * 16 bits))"
  | SWR " ((regno * regno * 16 bits))"
  | LDL " ((regno * regno * 16 bits))"
  | LDR " ((regno * regno * 16 bits))"
  | SDL " ((regno * regno * 16 bits))"
  | SDR " ((regno * regno * 16 bits))"
  | CACHE " ((regno * regno * 16 bits))"
  | SYNC " (unit)"
  | MFC0 " ((regno * regno * 3 bits * bool))"
  | HCF " (unit)"
  | MTC0 " ((regno * regno * 3 bits * bool))"
  | TLBWI " (unit)"
  | TLBWR " (unit)"
  | TLBR " (unit)"
  | TLBP " (unit)"
  | RDHWR " ((regno * regno))"
  | ERET " (unit)"
  | CGetPerm " ((regno * regno))"
  | CGetType " ((regno * regno))"
  | CGetBase " ((regno * regno))"
  | CGetLen " ((regno * regno))"
  | CGetTag " ((regno * regno))"
  | CGetSealed " ((regno * regno))"
  | CGetOffset " ((regno * regno))"
  | CGetAddr " ((regno * regno))"
  | CGetFlags " ((regno * regno))"
  | CGetAndAddr " ((regno * regno * regno))"
  | CGetPCC " (regno)"
  | CGetPCCSetOffset " ((regno * regno))"
  | CGetPCCIncOffset " ((regno * regno))"
  | CGetPCCSetAddr " ((regno * regno))"
  | CGetCause " (regno)"
  | CSetCause " (regno)"
  | CGetCID " (regno)"
  | CSetCID " (regno)"
  | CRAP " ((regno * regno))"
  | CRAM " ((regno * regno))"
  | CReadHwr " ((regno * regno))"
  | CWriteHwr " ((regno * regno))"
  | CAndPerm " ((regno * regno * regno))"
  | CSetFlags " ((regno * regno * regno))"
  | CToPtr " ((regno * regno * regno))"
  | CSub " ((regno * regno * regno))"
  | CPtrCmp " ((regno * regno * regno * CPtrCmpOp))"
  | CIncOffset " ((regno * regno * regno))"
  | CIncOffsetImmediate " ((regno * regno * 11 bits))"
  | CSetOffset " ((regno * regno * regno))"
  | CSetAddr " ((regno * regno * regno))"
  | CAndAddr " ((regno * regno * regno))"
  | CSetBounds " ((regno * regno * regno))"
  | CSetBoundsImmediate " ((regno * regno * 11 bits))"
  | CSetBoundsExact " ((regno * regno * regno))"
  | CClearTag " ((regno * regno))"
  | CMOVX " ((regno * regno * regno * bool))"
  | CMove " ((regno * regno))"
  | ClearRegs " ((ClearRegSet * 16 bits))"
  | CFromPtr " ((regno * regno * regno))"
  | CBuildCap " ((regno * regno * regno))"
  | CCopyType " ((regno * regno * regno))"
  | CCheckPerm " ((regno * regno))"
  | CCheckType " ((regno * regno))"
  | CCheckTag " (regno)"
  | CTestSubset " ((regno * regno * regno))"
  | CSeal " ((regno * regno * regno))"
  | CCSeal " ((regno * regno * regno))"
  | CSealEntry " ((regno * regno))"
  | CUnseal " ((regno * regno * regno))"
  | CCall " ((regno * regno * 11 bits))"
  | CReturn " (unit)"
  | CBX " ((regno * 16 bits * bool))"
  | CBZ " ((regno * 16 bits * bool))"
  | CJALR " ((regno * regno * bool))"
  | CLoad " ((regno * regno * regno * 8 bits * bool * WordType))"
  | CLoadLinked " ((regno * regno * bool * WordType))"
  | CLoadTags " ((regno * regno))"
  | CStore " ((regno * regno * regno * 8 bits * WordType))"
  | CStoreConditional " ((regno * regno * regno * WordType))"
  | CSC " ((regno * regno * regno * 11 bits))"
  | CSCC " ((regno * regno * regno))"
  | CLC " ((regno * regno * regno * 11 bits))"
  | CLCNT " ((regno * regno * regno))"
  | CLCBI " ((regno * regno * 16 bits))"
  | CLLC " ((regno * regno))"
  | CClearTags " (regno)"
  | C2Dump " (regno)"
  | RI " (unit)"



datatype register_value  =
    Regval_vector " ( register_value list)"
  | Regval_list " ( register_value list)"
  | Regval_option " ( register_value option)"
  | Regval_CapCauseReg " (CapCauseReg)"
  | Regval_Capability " (Capability)"
  | Regval_CauseReg " (CauseReg)"
  | Regval_ContextReg " (ContextReg)"
  | Regval_StatusReg " (StatusReg)"
  | Regval_TLBEntry " (TLBEntry)"
  | Regval_TLBEntryHiReg " (TLBEntryHiReg)"
  | Regval_TLBEntryLoReg " (TLBEntryLoReg)"
  | Regval_XContextReg " (XContextReg)"
  | Regval_bit " (bitU)"
  | Regval_bitvector_16_dec " ( 16 Word.word)"
  | Regval_bitvector_1_dec " ( 1 Word.word)"
  | Regval_bitvector_32_dec " ( 32 Word.word)"
  | Regval_bitvector_3_dec " ( 3 Word.word)"
  | Regval_bitvector_64_dec " ( 64 Word.word)"
  | Regval_bitvector_6_dec " ( 6 Word.word)"
  | Regval_bitvector_8_dec " ( 8 Word.word)"



record regstate  =
  
 CID ::"  64 Word.word " 

     CapCause ::" CapCauseReg " 

     ErrorEPCC ::" Capability " 

     EPCC ::" Capability " 

     KDC ::" Capability " 

     KCC ::" Capability " 

     KR2C ::" Capability " 

     KR1C ::" Capability " 

     CPLR ::" Capability " 

     CULR ::" Capability " 

     C31 ::" Capability " 

     C30 ::" Capability " 

     C29 ::" Capability " 

     C28 ::" Capability " 

     C27 ::" Capability " 

     C26 ::" Capability " 

     C25 ::" Capability " 

     C24 ::" Capability " 

     C23 ::" Capability " 

     C22 ::" Capability " 

     C21 ::" Capability " 

     C20 ::" Capability " 

     C19 ::" Capability " 

     C18 ::" Capability " 

     C17 ::" Capability " 

     C16 ::" Capability " 

     C15 ::" Capability " 

     C14 ::" Capability " 

     C13 ::" Capability " 

     C12 ::" Capability " 

     C11 ::" Capability " 

     C10 ::" Capability " 

     C09 ::" Capability " 

     C08 ::" Capability " 

     C07 ::" Capability " 

     C06 ::" Capability " 

     C05 ::" Capability " 

     C04 ::" Capability " 

     C03 ::" Capability " 

     C02 ::" Capability " 

     C01 ::" Capability " 

     DDC ::" Capability " 

     DelayedPCC ::" Capability " 

     NextPCC ::" Capability " 

     PCC ::" Capability " 

     UART_RVALID ::"  1 Word.word " 

     UART_RDATA ::"  8 Word.word " 

     UART_WRITTEN ::"  1 Word.word " 

     UART_WDATA ::"  8 Word.word " 

     GPR ::" ( 64 Word.word) list " 

     LO ::"  64 Word.word " 

     HI ::"  64 Word.word " 

     DelayedPC ::"  64 Word.word " 

     BranchPending ::"  1 Word.word " 

     InBranchDelay ::"  1 Word.word " 

     NextInBranchDelay ::"  1 Word.word " 

     CP0Status ::" StatusReg " 

     CP0ConfigK0 ::"  3 Word.word " 

     CP0UserLocal ::"  64 Word.word " 

     CP0HWREna ::"  32 Word.word " 

     CP0Count ::"  32 Word.word " 

     CP0BadInstrP ::"  32 Word.word " 

     CP0BadInstr ::"  32 Word.word " 

     LastInstrBits ::"  32 Word.word " 

     CurrentInstrBits ::"  32 Word.word " 

     CP0BadVAddr ::"  64 Word.word " 

     CP0LLAddr ::"  64 Word.word " 

     CP0LLBit ::"  1 Word.word " 

     CP0Cause ::" CauseReg " 

     CP0Compare ::"  32 Word.word " 

     TLBEntry63 ::" TLBEntry " 

     TLBEntry62 ::" TLBEntry " 

     TLBEntry61 ::" TLBEntry " 

     TLBEntry60 ::" TLBEntry " 

     TLBEntry59 ::" TLBEntry " 

     TLBEntry58 ::" TLBEntry " 

     TLBEntry57 ::" TLBEntry " 

     TLBEntry56 ::" TLBEntry " 

     TLBEntry55 ::" TLBEntry " 

     TLBEntry54 ::" TLBEntry " 

     TLBEntry53 ::" TLBEntry " 

     TLBEntry52 ::" TLBEntry " 

     TLBEntry51 ::" TLBEntry " 

     TLBEntry50 ::" TLBEntry " 

     TLBEntry49 ::" TLBEntry " 

     TLBEntry48 ::" TLBEntry " 

     TLBEntry47 ::" TLBEntry " 

     TLBEntry46 ::" TLBEntry " 

     TLBEntry45 ::" TLBEntry " 

     TLBEntry44 ::" TLBEntry " 

     TLBEntry43 ::" TLBEntry " 

     TLBEntry42 ::" TLBEntry " 

     TLBEntry41 ::" TLBEntry " 

     TLBEntry40 ::" TLBEntry " 

     TLBEntry39 ::" TLBEntry " 

     TLBEntry38 ::" TLBEntry " 

     TLBEntry37 ::" TLBEntry " 

     TLBEntry36 ::" TLBEntry " 

     TLBEntry35 ::" TLBEntry " 

     TLBEntry34 ::" TLBEntry " 

     TLBEntry33 ::" TLBEntry " 

     TLBEntry32 ::" TLBEntry " 

     TLBEntry31 ::" TLBEntry " 

     TLBEntry30 ::" TLBEntry " 

     TLBEntry29 ::" TLBEntry " 

     TLBEntry28 ::" TLBEntry " 

     TLBEntry27 ::" TLBEntry " 

     TLBEntry26 ::" TLBEntry " 

     TLBEntry25 ::" TLBEntry " 

     TLBEntry24 ::" TLBEntry " 

     TLBEntry23 ::" TLBEntry " 

     TLBEntry22 ::" TLBEntry " 

     TLBEntry21 ::" TLBEntry " 

     TLBEntry20 ::" TLBEntry " 

     TLBEntry19 ::" TLBEntry " 

     TLBEntry18 ::" TLBEntry " 

     TLBEntry17 ::" TLBEntry " 

     TLBEntry16 ::" TLBEntry " 

     TLBEntry15 ::" TLBEntry " 

     TLBEntry14 ::" TLBEntry " 

     TLBEntry13 ::" TLBEntry " 

     TLBEntry12 ::" TLBEntry " 

     TLBEntry11 ::" TLBEntry " 

     TLBEntry10 ::" TLBEntry " 

     TLBEntry09 ::" TLBEntry " 

     TLBEntry08 ::" TLBEntry " 

     TLBEntry07 ::" TLBEntry " 

     TLBEntry06 ::" TLBEntry " 

     TLBEntry05 ::" TLBEntry " 

     TLBEntry04 ::" TLBEntry " 

     TLBEntry03 ::" TLBEntry " 

     TLBEntry02 ::" TLBEntry " 

     TLBEntry01 ::" TLBEntry " 

     TLBEntry00 ::" TLBEntry " 

     TLBXContext ::" XContextReg " 

     TLBEntryHi ::" TLBEntryHiReg " 

     TLBWired ::"  6 Word.word " 

     TLBPageMask ::"  16 Word.word " 

     TLBContext ::" ContextReg " 

     TLBEntryLo1 ::" TLBEntryLoReg " 

     TLBEntryLo0 ::" TLBEntryLoReg " 

     TLBRandom ::"  6 Word.word " 

     TLBIndex ::"  6 Word.word " 

     TLBProbe ::"  1 Word.word " 

     NextPC ::"  64 Word.word " 

     PC ::"  64 Word.word "  





\<comment> \<open>\<open>val CapCauseReg_of_regval : register_value -> maybe CapCauseReg\<close>\<close>

fun CapCauseReg_of_regval  :: \<open> register_value \<Rightarrow>(CapCauseReg)option \<close>  where 
     \<open> CapCauseReg_of_regval (Regval_CapCauseReg (v)) = ( Some v )\<close> 
  for  v  :: " CapCauseReg "
|\<open> CapCauseReg_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_CapCauseReg : CapCauseReg -> register_value\<close>\<close>

definition regval_of_CapCauseReg  :: \<open> CapCauseReg \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_CapCauseReg v = ( Regval_CapCauseReg v )\<close> 
  for  v  :: " CapCauseReg "


\<comment> \<open>\<open>val Capability_of_regval : register_value -> maybe Capability\<close>\<close>

fun Capability_of_regval  :: \<open> register_value \<Rightarrow>(Capability)option \<close>  where 
     \<open> Capability_of_regval (Regval_Capability (v)) = ( Some v )\<close> 
  for  v  :: " Capability "
|\<open> Capability_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_Capability : Capability -> register_value\<close>\<close>

definition regval_of_Capability  :: \<open> Capability \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_Capability v = ( Regval_Capability v )\<close> 
  for  v  :: " Capability "


\<comment> \<open>\<open>val CauseReg_of_regval : register_value -> maybe CauseReg\<close>\<close>

fun CauseReg_of_regval  :: \<open> register_value \<Rightarrow>(CauseReg)option \<close>  where 
     \<open> CauseReg_of_regval (Regval_CauseReg (v)) = ( Some v )\<close> 
  for  v  :: " CauseReg "
|\<open> CauseReg_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_CauseReg : CauseReg -> register_value\<close>\<close>

definition regval_of_CauseReg  :: \<open> CauseReg \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_CauseReg v = ( Regval_CauseReg v )\<close> 
  for  v  :: " CauseReg "


\<comment> \<open>\<open>val ContextReg_of_regval : register_value -> maybe ContextReg\<close>\<close>

fun ContextReg_of_regval  :: \<open> register_value \<Rightarrow>(ContextReg)option \<close>  where 
     \<open> ContextReg_of_regval (Regval_ContextReg (v)) = ( Some v )\<close> 
  for  v  :: " ContextReg "
|\<open> ContextReg_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_ContextReg : ContextReg -> register_value\<close>\<close>

definition regval_of_ContextReg  :: \<open> ContextReg \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_ContextReg v = ( Regval_ContextReg v )\<close> 
  for  v  :: " ContextReg "


\<comment> \<open>\<open>val StatusReg_of_regval : register_value -> maybe StatusReg\<close>\<close>

fun StatusReg_of_regval  :: \<open> register_value \<Rightarrow>(StatusReg)option \<close>  where 
     \<open> StatusReg_of_regval (Regval_StatusReg (v)) = ( Some v )\<close> 
  for  v  :: " StatusReg "
|\<open> StatusReg_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_StatusReg : StatusReg -> register_value\<close>\<close>

definition regval_of_StatusReg  :: \<open> StatusReg \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_StatusReg v = ( Regval_StatusReg v )\<close> 
  for  v  :: " StatusReg "


\<comment> \<open>\<open>val TLBEntry_of_regval : register_value -> maybe TLBEntry\<close>\<close>

fun TLBEntry_of_regval  :: \<open> register_value \<Rightarrow>(TLBEntry)option \<close>  where 
     \<open> TLBEntry_of_regval (Regval_TLBEntry (v)) = ( Some v )\<close> 
  for  v  :: " TLBEntry "
|\<open> TLBEntry_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_TLBEntry : TLBEntry -> register_value\<close>\<close>

definition regval_of_TLBEntry  :: \<open> TLBEntry \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_TLBEntry v = ( Regval_TLBEntry v )\<close> 
  for  v  :: " TLBEntry "


\<comment> \<open>\<open>val TLBEntryHiReg_of_regval : register_value -> maybe TLBEntryHiReg\<close>\<close>

fun TLBEntryHiReg_of_regval  :: \<open> register_value \<Rightarrow>(TLBEntryHiReg)option \<close>  where 
     \<open> TLBEntryHiReg_of_regval (Regval_TLBEntryHiReg (v)) = ( Some v )\<close> 
  for  v  :: " TLBEntryHiReg "
|\<open> TLBEntryHiReg_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_TLBEntryHiReg : TLBEntryHiReg -> register_value\<close>\<close>

definition regval_of_TLBEntryHiReg  :: \<open> TLBEntryHiReg \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_TLBEntryHiReg v = ( Regval_TLBEntryHiReg v )\<close> 
  for  v  :: " TLBEntryHiReg "


\<comment> \<open>\<open>val TLBEntryLoReg_of_regval : register_value -> maybe TLBEntryLoReg\<close>\<close>

fun TLBEntryLoReg_of_regval  :: \<open> register_value \<Rightarrow>(TLBEntryLoReg)option \<close>  where 
     \<open> TLBEntryLoReg_of_regval (Regval_TLBEntryLoReg (v)) = ( Some v )\<close> 
  for  v  :: " TLBEntryLoReg "
|\<open> TLBEntryLoReg_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_TLBEntryLoReg : TLBEntryLoReg -> register_value\<close>\<close>

definition regval_of_TLBEntryLoReg  :: \<open> TLBEntryLoReg \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_TLBEntryLoReg v = ( Regval_TLBEntryLoReg v )\<close> 
  for  v  :: " TLBEntryLoReg "


\<comment> \<open>\<open>val XContextReg_of_regval : register_value -> maybe XContextReg\<close>\<close>

fun XContextReg_of_regval  :: \<open> register_value \<Rightarrow>(XContextReg)option \<close>  where 
     \<open> XContextReg_of_regval (Regval_XContextReg (v)) = ( Some v )\<close> 
  for  v  :: " XContextReg "
|\<open> XContextReg_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_XContextReg : XContextReg -> register_value\<close>\<close>

definition regval_of_XContextReg  :: \<open> XContextReg \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_XContextReg v = ( Regval_XContextReg v )\<close> 
  for  v  :: " XContextReg "


\<comment> \<open>\<open>val bit_of_regval : register_value -> maybe bitU\<close>\<close>

fun bit_of_regval  :: \<open> register_value \<Rightarrow>(bitU)option \<close>  where 
     \<open> bit_of_regval (Regval_bit (v)) = ( Some v )\<close> 
  for  v  :: " bitU "
|\<open> bit_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bit : bitU -> register_value\<close>\<close>

definition regval_of_bit  :: \<open> bitU \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bit v = ( Regval_bit v )\<close> 
  for  v  :: " bitU "


\<comment> \<open>\<open>val bitvector_16_dec_of_regval : register_value -> maybe (mword ty16)\<close>\<close>

fun bitvector_16_dec_of_regval  :: \<open> register_value \<Rightarrow>((16)Word.word)option \<close>  where 
     \<open> bitvector_16_dec_of_regval (Regval_bitvector_16_dec (v)) = ( Some v )\<close> 
  for  v  :: "(16)Word.word "
|\<open> bitvector_16_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_16_dec : mword ty16 -> register_value\<close>\<close>

definition regval_of_bitvector_16_dec  :: \<open>(16)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_16_dec v = ( Regval_bitvector_16_dec v )\<close> 
  for  v  :: "(16)Word.word "


\<comment> \<open>\<open>val bitvector_1_dec_of_regval : register_value -> maybe (mword ty1)\<close>\<close>

fun bitvector_1_dec_of_regval  :: \<open> register_value \<Rightarrow>((1)Word.word)option \<close>  where 
     \<open> bitvector_1_dec_of_regval (Regval_bitvector_1_dec (v)) = ( Some v )\<close> 
  for  v  :: "(1)Word.word "
|\<open> bitvector_1_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_1_dec : mword ty1 -> register_value\<close>\<close>

definition regval_of_bitvector_1_dec  :: \<open>(1)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_1_dec v = ( Regval_bitvector_1_dec v )\<close> 
  for  v  :: "(1)Word.word "


\<comment> \<open>\<open>val bitvector_32_dec_of_regval : register_value -> maybe (mword ty32)\<close>\<close>

fun bitvector_32_dec_of_regval  :: \<open> register_value \<Rightarrow>((32)Word.word)option \<close>  where 
     \<open> bitvector_32_dec_of_regval (Regval_bitvector_32_dec (v)) = ( Some v )\<close> 
  for  v  :: "(32)Word.word "
|\<open> bitvector_32_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_32_dec : mword ty32 -> register_value\<close>\<close>

definition regval_of_bitvector_32_dec  :: \<open>(32)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_32_dec v = ( Regval_bitvector_32_dec v )\<close> 
  for  v  :: "(32)Word.word "


\<comment> \<open>\<open>val bitvector_3_dec_of_regval : register_value -> maybe (mword ty3)\<close>\<close>

fun bitvector_3_dec_of_regval  :: \<open> register_value \<Rightarrow>((3)Word.word)option \<close>  where 
     \<open> bitvector_3_dec_of_regval (Regval_bitvector_3_dec (v)) = ( Some v )\<close> 
  for  v  :: "(3)Word.word "
|\<open> bitvector_3_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_3_dec : mword ty3 -> register_value\<close>\<close>

definition regval_of_bitvector_3_dec  :: \<open>(3)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_3_dec v = ( Regval_bitvector_3_dec v )\<close> 
  for  v  :: "(3)Word.word "


\<comment> \<open>\<open>val bitvector_64_dec_of_regval : register_value -> maybe (mword ty64)\<close>\<close>

fun bitvector_64_dec_of_regval  :: \<open> register_value \<Rightarrow>((64)Word.word)option \<close>  where 
     \<open> bitvector_64_dec_of_regval (Regval_bitvector_64_dec (v)) = ( Some v )\<close> 
  for  v  :: "(64)Word.word "
|\<open> bitvector_64_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_64_dec : mword ty64 -> register_value\<close>\<close>

definition regval_of_bitvector_64_dec  :: \<open>(64)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_64_dec v = ( Regval_bitvector_64_dec v )\<close> 
  for  v  :: "(64)Word.word "


\<comment> \<open>\<open>val bitvector_6_dec_of_regval : register_value -> maybe (mword ty6)\<close>\<close>

fun bitvector_6_dec_of_regval  :: \<open> register_value \<Rightarrow>((6)Word.word)option \<close>  where 
     \<open> bitvector_6_dec_of_regval (Regval_bitvector_6_dec (v)) = ( Some v )\<close> 
  for  v  :: "(6)Word.word "
|\<open> bitvector_6_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_6_dec : mword ty6 -> register_value\<close>\<close>

definition regval_of_bitvector_6_dec  :: \<open>(6)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_6_dec v = ( Regval_bitvector_6_dec v )\<close> 
  for  v  :: "(6)Word.word "


\<comment> \<open>\<open>val bitvector_8_dec_of_regval : register_value -> maybe (mword ty8)\<close>\<close>

fun bitvector_8_dec_of_regval  :: \<open> register_value \<Rightarrow>((8)Word.word)option \<close>  where 
     \<open> bitvector_8_dec_of_regval (Regval_bitvector_8_dec (v)) = ( Some v )\<close> 
  for  v  :: "(8)Word.word "
|\<open> bitvector_8_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_8_dec : mword ty8 -> register_value\<close>\<close>

definition regval_of_bitvector_8_dec  :: \<open>(8)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_8_dec v = ( Regval_bitvector_8_dec v )\<close> 
  for  v  :: "(8)Word.word "




\<comment> \<open>\<open>val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)\<close>\<close>
definition vector_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option \<close>  where 
     \<open> vector_of_regval of_regval1 = ( (\<lambda>x .  
  (case  x of
        Regval_vector v => just_list (List.map of_regval1 v)
    | _ => None
  )))\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_vector : forall 'a. ('a -> register_value) -> list 'a -> register_value\<close>\<close>
definition regval_of_vector  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a list \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_vector regval_of1 xs = ( Regval_vector (List.map regval_of1 xs))\<close> 
  for  regval_of1  :: " 'a \<Rightarrow> register_value " 
  and  xs  :: " 'a list "


\<comment> \<open>\<open>val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)\<close>\<close>
definition list_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option \<close>  where 
     \<open> list_of_regval of_regval1 = ( (\<lambda>x .  
  (case  x of
        Regval_list v => just_list (List.map of_regval1 v)
    | _ => None
  )))\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value\<close>\<close>
definition regval_of_list  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a list \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_list regval_of1 xs = ( Regval_list (List.map regval_of1 xs))\<close> 
  for  regval_of1  :: " 'a \<Rightarrow> register_value " 
  and  xs  :: " 'a list "


\<comment> \<open>\<open>val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)\<close>\<close>
definition option_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a option)option \<close>  where 
     \<open> option_of_regval of_regval1 = ( (\<lambda>x .  
  (case  x of
        Regval_option v => Some (Option.bind v of_regval1)
    | _ => None
  )))\<close> 
  for  of_regval1  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value\<close>\<close>
definition regval_of_option  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a option \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_option regval_of1 v = ( Regval_option (map_option regval_of1 v))\<close> 
  for  regval_of1  :: " 'a \<Rightarrow> register_value " 
  and  v  :: " 'a option "



definition CID_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CID_ref = ( (|
  name = (''CID''),
  read_from = ((\<lambda> s . (CID   s))),
  write_to = ((\<lambda> v s .  (( s (| CID := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ErrorEPCC_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> ErrorEPCC_ref = ( (|
  name = (''ErrorEPCC''),
  read_from = ((\<lambda> s . (ErrorEPCC   s))),
  write_to = ((\<lambda> v s .  (( s (| ErrorEPCC := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition KDC_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> KDC_ref = ( (|
  name = (''KDC''),
  read_from = ((\<lambda> s . (KDC   s))),
  write_to = ((\<lambda> v s .  (( s (| KDC := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition KR2C_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> KR2C_ref = ( (|
  name = (''KR2C''),
  read_from = ((\<lambda> s . (KR2C   s))),
  write_to = ((\<lambda> v s .  (( s (| KR2C := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition KR1C_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> KR1C_ref = ( (|
  name = (''KR1C''),
  read_from = ((\<lambda> s . (KR1C   s))),
  write_to = ((\<lambda> v s .  (( s (| KR1C := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition CPLR_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> CPLR_ref = ( (|
  name = (''CPLR''),
  read_from = ((\<lambda> s . (CPLR   s))),
  write_to = ((\<lambda> v s .  (( s (| CPLR := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition CULR_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> CULR_ref = ( (|
  name = (''CULR''),
  read_from = ((\<lambda> s . (CULR   s))),
  write_to = ((\<lambda> v s .  (( s (| CULR := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C31_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C31_ref = ( (|
  name = (''C31''),
  read_from = ((\<lambda> s . (C31   s))),
  write_to = ((\<lambda> v s .  (( s (| C31 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C30_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C30_ref = ( (|
  name = (''C30''),
  read_from = ((\<lambda> s . (C30   s))),
  write_to = ((\<lambda> v s .  (( s (| C30 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C29_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C29_ref = ( (|
  name = (''C29''),
  read_from = ((\<lambda> s . (C29   s))),
  write_to = ((\<lambda> v s .  (( s (| C29 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C28_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C28_ref = ( (|
  name = (''C28''),
  read_from = ((\<lambda> s . (C28   s))),
  write_to = ((\<lambda> v s .  (( s (| C28 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C27_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C27_ref = ( (|
  name = (''C27''),
  read_from = ((\<lambda> s . (C27   s))),
  write_to = ((\<lambda> v s .  (( s (| C27 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C26_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C26_ref = ( (|
  name = (''C26''),
  read_from = ((\<lambda> s . (C26   s))),
  write_to = ((\<lambda> v s .  (( s (| C26 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C25_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C25_ref = ( (|
  name = (''C25''),
  read_from = ((\<lambda> s . (C25   s))),
  write_to = ((\<lambda> v s .  (( s (| C25 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C24_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C24_ref = ( (|
  name = (''C24''),
  read_from = ((\<lambda> s . (C24   s))),
  write_to = ((\<lambda> v s .  (( s (| C24 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C23_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C23_ref = ( (|
  name = (''C23''),
  read_from = ((\<lambda> s . (C23   s))),
  write_to = ((\<lambda> v s .  (( s (| C23 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C22_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C22_ref = ( (|
  name = (''C22''),
  read_from = ((\<lambda> s . (C22   s))),
  write_to = ((\<lambda> v s .  (( s (| C22 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C21_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C21_ref = ( (|
  name = (''C21''),
  read_from = ((\<lambda> s . (C21   s))),
  write_to = ((\<lambda> v s .  (( s (| C21 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C20_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C20_ref = ( (|
  name = (''C20''),
  read_from = ((\<lambda> s . (C20   s))),
  write_to = ((\<lambda> v s .  (( s (| C20 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C19_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C19_ref = ( (|
  name = (''C19''),
  read_from = ((\<lambda> s . (C19   s))),
  write_to = ((\<lambda> v s .  (( s (| C19 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C18_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C18_ref = ( (|
  name = (''C18''),
  read_from = ((\<lambda> s . (C18   s))),
  write_to = ((\<lambda> v s .  (( s (| C18 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C17_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C17_ref = ( (|
  name = (''C17''),
  read_from = ((\<lambda> s . (C17   s))),
  write_to = ((\<lambda> v s .  (( s (| C17 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C16_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C16_ref = ( (|
  name = (''C16''),
  read_from = ((\<lambda> s . (C16   s))),
  write_to = ((\<lambda> v s .  (( s (| C16 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C15_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C15_ref = ( (|
  name = (''C15''),
  read_from = ((\<lambda> s . (C15   s))),
  write_to = ((\<lambda> v s .  (( s (| C15 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C14_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C14_ref = ( (|
  name = (''C14''),
  read_from = ((\<lambda> s . (C14   s))),
  write_to = ((\<lambda> v s .  (( s (| C14 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C13_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C13_ref = ( (|
  name = (''C13''),
  read_from = ((\<lambda> s . (C13   s))),
  write_to = ((\<lambda> v s .  (( s (| C13 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C12_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C12_ref = ( (|
  name = (''C12''),
  read_from = ((\<lambda> s . (C12   s))),
  write_to = ((\<lambda> v s .  (( s (| C12 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C11_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C11_ref = ( (|
  name = (''C11''),
  read_from = ((\<lambda> s . (C11   s))),
  write_to = ((\<lambda> v s .  (( s (| C11 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C10_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C10_ref = ( (|
  name = (''C10''),
  read_from = ((\<lambda> s . (C10   s))),
  write_to = ((\<lambda> v s .  (( s (| C10 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C09_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C09_ref = ( (|
  name = (''C09''),
  read_from = ((\<lambda> s . (C09   s))),
  write_to = ((\<lambda> v s .  (( s (| C09 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C08_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C08_ref = ( (|
  name = (''C08''),
  read_from = ((\<lambda> s . (C08   s))),
  write_to = ((\<lambda> v s .  (( s (| C08 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C07_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C07_ref = ( (|
  name = (''C07''),
  read_from = ((\<lambda> s . (C07   s))),
  write_to = ((\<lambda> v s .  (( s (| C07 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C06_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C06_ref = ( (|
  name = (''C06''),
  read_from = ((\<lambda> s . (C06   s))),
  write_to = ((\<lambda> v s .  (( s (| C06 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C05_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C05_ref = ( (|
  name = (''C05''),
  read_from = ((\<lambda> s . (C05   s))),
  write_to = ((\<lambda> v s .  (( s (| C05 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C04_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C04_ref = ( (|
  name = (''C04''),
  read_from = ((\<lambda> s . (C04   s))),
  write_to = ((\<lambda> v s .  (( s (| C04 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C03_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C03_ref = ( (|
  name = (''C03''),
  read_from = ((\<lambda> s . (C03   s))),
  write_to = ((\<lambda> v s .  (( s (| C03 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C02_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C02_ref = ( (|
  name = (''C02''),
  read_from = ((\<lambda> s . (C02   s))),
  write_to = ((\<lambda> v s .  (( s (| C02 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition C01_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> C01_ref = ( (|
  name = (''C01''),
  read_from = ((\<lambda> s . (C01   s))),
  write_to = ((\<lambda> v s .  (( s (| C01 := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition DDC_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> DDC_ref = ( (|
  name = (''DDC''),
  read_from = ((\<lambda> s . (DDC   s))),
  write_to = ((\<lambda> v s .  (( s (| DDC := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition CapCause_ref  :: \<open>((regstate),(register_value),(CapCauseReg))register_ref \<close>  where 
     \<open> CapCause_ref = ( (|
  name = (''CapCause''),
  read_from = ((\<lambda> s . (CapCause   s))),
  write_to = ((\<lambda> v s .  (( s (| CapCause := v |))))),
  of_regval = ((\<lambda> v .  CapCauseReg_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_CapCauseReg v)) |) )\<close>


definition NextPCC_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> NextPCC_ref = ( (|
  name = (''NextPCC''),
  read_from = ((\<lambda> s . (NextPCC   s))),
  write_to = ((\<lambda> v s .  (( s (| NextPCC := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition DelayedPCC_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> DelayedPCC_ref = ( (|
  name = (''DelayedPCC''),
  read_from = ((\<lambda> s . (DelayedPCC   s))),
  write_to = ((\<lambda> v s .  (( s (| DelayedPCC := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition PCC_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> PCC_ref = ( (|
  name = (''PCC''),
  read_from = ((\<lambda> s . (PCC   s))),
  write_to = ((\<lambda> v s .  (( s (| PCC := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition KCC_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> KCC_ref = ( (|
  name = (''KCC''),
  read_from = ((\<lambda> s . (KCC   s))),
  write_to = ((\<lambda> v s .  (( s (| KCC := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition EPCC_ref  :: \<open>((regstate),(register_value),(Capability))register_ref \<close>  where 
     \<open> EPCC_ref = ( (|
  name = (''EPCC''),
  read_from = ((\<lambda> s . (EPCC   s))),
  write_to = ((\<lambda> v s .  (( s (| EPCC := v |))))),
  of_regval = ((\<lambda> v .  Capability_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_Capability v)) |) )\<close>


definition UART_RVALID_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> UART_RVALID_ref = ( (|
  name = (''UART_RVALID''),
  read_from = ((\<lambda> s . (UART_RVALID   s))),
  write_to = ((\<lambda> v s .  (( s (| UART_RVALID := v |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition UART_RDATA_ref  :: \<open>((regstate),(register_value),((8)Word.word))register_ref \<close>  where 
     \<open> UART_RDATA_ref = ( (|
  name = (''UART_RDATA''),
  read_from = ((\<lambda> s . (UART_RDATA   s))),
  write_to = ((\<lambda> v s .  (( s (| UART_RDATA := v |))))),
  of_regval = ((\<lambda> v .  bitvector_8_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_8_dec v)) |) )\<close>


definition UART_WRITTEN_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> UART_WRITTEN_ref = ( (|
  name = (''UART_WRITTEN''),
  read_from = ((\<lambda> s . (UART_WRITTEN   s))),
  write_to = ((\<lambda> v s .  (( s (| UART_WRITTEN := v |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition UART_WDATA_ref  :: \<open>((regstate),(register_value),((8)Word.word))register_ref \<close>  where 
     \<open> UART_WDATA_ref = ( (|
  name = (''UART_WDATA''),
  read_from = ((\<lambda> s . (UART_WDATA   s))),
  write_to = ((\<lambda> v s .  (( s (| UART_WDATA := v |))))),
  of_regval = ((\<lambda> v .  bitvector_8_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_8_dec v)) |) )\<close>


definition GPR_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> GPR_ref = ( (|
  name = (''GPR''),
  read_from = ((\<lambda> s . (GPR   s))),
  write_to = ((\<lambda> v s .  (( s (| GPR := v |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition LO_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> LO_ref = ( (|
  name = (''LO''),
  read_from = ((\<lambda> s . (LO   s))),
  write_to = ((\<lambda> v s .  (( s (| LO := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HI_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HI_ref = ( (|
  name = (''HI''),
  read_from = ((\<lambda> s . (HI   s))),
  write_to = ((\<lambda> v s .  (( s (| HI := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DelayedPC_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DelayedPC_ref = ( (|
  name = (''DelayedPC''),
  read_from = ((\<lambda> s . (DelayedPC   s))),
  write_to = ((\<lambda> v s .  (( s (| DelayedPC := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition BranchPending_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> BranchPending_ref = ( (|
  name = (''BranchPending''),
  read_from = ((\<lambda> s . (BranchPending   s))),
  write_to = ((\<lambda> v s .  (( s (| BranchPending := v |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition InBranchDelay_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> InBranchDelay_ref = ( (|
  name = (''InBranchDelay''),
  read_from = ((\<lambda> s . (InBranchDelay   s))),
  write_to = ((\<lambda> v s .  (( s (| InBranchDelay := v |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition NextInBranchDelay_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> NextInBranchDelay_ref = ( (|
  name = (''NextInBranchDelay''),
  read_from = ((\<lambda> s . (NextInBranchDelay   s))),
  write_to = ((\<lambda> v s .  (( s (| NextInBranchDelay := v |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition CP0Status_ref  :: \<open>((regstate),(register_value),(StatusReg))register_ref \<close>  where 
     \<open> CP0Status_ref = ( (|
  name = (''CP0Status''),
  read_from = ((\<lambda> s . (CP0Status   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0Status := v |))))),
  of_regval = ((\<lambda> v .  StatusReg_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_StatusReg v)) |) )\<close>


definition CP0ConfigK0_ref  :: \<open>((regstate),(register_value),((3)Word.word))register_ref \<close>  where 
     \<open> CP0ConfigK0_ref = ( (|
  name = (''CP0ConfigK0''),
  read_from = ((\<lambda> s . (CP0ConfigK0   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0ConfigK0 := v |))))),
  of_regval = ((\<lambda> v .  bitvector_3_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_3_dec v)) |) )\<close>


definition CP0UserLocal_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CP0UserLocal_ref = ( (|
  name = (''CP0UserLocal''),
  read_from = ((\<lambda> s . (CP0UserLocal   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0UserLocal := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CP0HWREna_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CP0HWREna_ref = ( (|
  name = (''CP0HWREna''),
  read_from = ((\<lambda> s . (CP0HWREna   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0HWREna := v |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CP0Count_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CP0Count_ref = ( (|
  name = (''CP0Count''),
  read_from = ((\<lambda> s . (CP0Count   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0Count := v |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CP0BadInstrP_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CP0BadInstrP_ref = ( (|
  name = (''CP0BadInstrP''),
  read_from = ((\<lambda> s . (CP0BadInstrP   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0BadInstrP := v |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CP0BadInstr_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CP0BadInstr_ref = ( (|
  name = (''CP0BadInstr''),
  read_from = ((\<lambda> s . (CP0BadInstr   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0BadInstr := v |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition LastInstrBits_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> LastInstrBits_ref = ( (|
  name = (''LastInstrBits''),
  read_from = ((\<lambda> s . (LastInstrBits   s))),
  write_to = ((\<lambda> v s .  (( s (| LastInstrBits := v |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CurrentInstrBits_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CurrentInstrBits_ref = ( (|
  name = (''CurrentInstrBits''),
  read_from = ((\<lambda> s . (CurrentInstrBits   s))),
  write_to = ((\<lambda> v s .  (( s (| CurrentInstrBits := v |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CP0BadVAddr_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CP0BadVAddr_ref = ( (|
  name = (''CP0BadVAddr''),
  read_from = ((\<lambda> s . (CP0BadVAddr   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0BadVAddr := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CP0LLAddr_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CP0LLAddr_ref = ( (|
  name = (''CP0LLAddr''),
  read_from = ((\<lambda> s . (CP0LLAddr   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0LLAddr := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CP0LLBit_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> CP0LLBit_ref = ( (|
  name = (''CP0LLBit''),
  read_from = ((\<lambda> s . (CP0LLBit   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0LLBit := v |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition CP0Cause_ref  :: \<open>((regstate),(register_value),(CauseReg))register_ref \<close>  where 
     \<open> CP0Cause_ref = ( (|
  name = (''CP0Cause''),
  read_from = ((\<lambda> s . (CP0Cause   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0Cause := v |))))),
  of_regval = ((\<lambda> v .  CauseReg_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_CauseReg v)) |) )\<close>


definition CP0Compare_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CP0Compare_ref = ( (|
  name = (''CP0Compare''),
  read_from = ((\<lambda> s . (CP0Compare   s))),
  write_to = ((\<lambda> v s .  (( s (| CP0Compare := v |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TLBEntry63_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry63_ref = ( (|
  name = (''TLBEntry63''),
  read_from = ((\<lambda> s . (TLBEntry63   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry63 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry62_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry62_ref = ( (|
  name = (''TLBEntry62''),
  read_from = ((\<lambda> s . (TLBEntry62   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry62 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry61_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry61_ref = ( (|
  name = (''TLBEntry61''),
  read_from = ((\<lambda> s . (TLBEntry61   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry61 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry60_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry60_ref = ( (|
  name = (''TLBEntry60''),
  read_from = ((\<lambda> s . (TLBEntry60   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry60 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry59_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry59_ref = ( (|
  name = (''TLBEntry59''),
  read_from = ((\<lambda> s . (TLBEntry59   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry59 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry58_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry58_ref = ( (|
  name = (''TLBEntry58''),
  read_from = ((\<lambda> s . (TLBEntry58   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry58 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry57_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry57_ref = ( (|
  name = (''TLBEntry57''),
  read_from = ((\<lambda> s . (TLBEntry57   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry57 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry56_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry56_ref = ( (|
  name = (''TLBEntry56''),
  read_from = ((\<lambda> s . (TLBEntry56   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry56 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry55_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry55_ref = ( (|
  name = (''TLBEntry55''),
  read_from = ((\<lambda> s . (TLBEntry55   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry55 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry54_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry54_ref = ( (|
  name = (''TLBEntry54''),
  read_from = ((\<lambda> s . (TLBEntry54   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry54 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry53_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry53_ref = ( (|
  name = (''TLBEntry53''),
  read_from = ((\<lambda> s . (TLBEntry53   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry53 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry52_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry52_ref = ( (|
  name = (''TLBEntry52''),
  read_from = ((\<lambda> s . (TLBEntry52   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry52 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry51_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry51_ref = ( (|
  name = (''TLBEntry51''),
  read_from = ((\<lambda> s . (TLBEntry51   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry51 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry50_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry50_ref = ( (|
  name = (''TLBEntry50''),
  read_from = ((\<lambda> s . (TLBEntry50   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry50 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry49_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry49_ref = ( (|
  name = (''TLBEntry49''),
  read_from = ((\<lambda> s . (TLBEntry49   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry49 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry48_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry48_ref = ( (|
  name = (''TLBEntry48''),
  read_from = ((\<lambda> s . (TLBEntry48   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry48 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry47_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry47_ref = ( (|
  name = (''TLBEntry47''),
  read_from = ((\<lambda> s . (TLBEntry47   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry47 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry46_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry46_ref = ( (|
  name = (''TLBEntry46''),
  read_from = ((\<lambda> s . (TLBEntry46   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry46 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry45_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry45_ref = ( (|
  name = (''TLBEntry45''),
  read_from = ((\<lambda> s . (TLBEntry45   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry45 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry44_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry44_ref = ( (|
  name = (''TLBEntry44''),
  read_from = ((\<lambda> s . (TLBEntry44   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry44 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry43_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry43_ref = ( (|
  name = (''TLBEntry43''),
  read_from = ((\<lambda> s . (TLBEntry43   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry43 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry42_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry42_ref = ( (|
  name = (''TLBEntry42''),
  read_from = ((\<lambda> s . (TLBEntry42   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry42 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry41_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry41_ref = ( (|
  name = (''TLBEntry41''),
  read_from = ((\<lambda> s . (TLBEntry41   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry41 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry40_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry40_ref = ( (|
  name = (''TLBEntry40''),
  read_from = ((\<lambda> s . (TLBEntry40   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry40 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry39_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry39_ref = ( (|
  name = (''TLBEntry39''),
  read_from = ((\<lambda> s . (TLBEntry39   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry39 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry38_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry38_ref = ( (|
  name = (''TLBEntry38''),
  read_from = ((\<lambda> s . (TLBEntry38   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry38 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry37_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry37_ref = ( (|
  name = (''TLBEntry37''),
  read_from = ((\<lambda> s . (TLBEntry37   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry37 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry36_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry36_ref = ( (|
  name = (''TLBEntry36''),
  read_from = ((\<lambda> s . (TLBEntry36   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry36 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry35_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry35_ref = ( (|
  name = (''TLBEntry35''),
  read_from = ((\<lambda> s . (TLBEntry35   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry35 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry34_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry34_ref = ( (|
  name = (''TLBEntry34''),
  read_from = ((\<lambda> s . (TLBEntry34   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry34 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry33_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry33_ref = ( (|
  name = (''TLBEntry33''),
  read_from = ((\<lambda> s . (TLBEntry33   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry33 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry32_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry32_ref = ( (|
  name = (''TLBEntry32''),
  read_from = ((\<lambda> s . (TLBEntry32   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry32 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry31_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry31_ref = ( (|
  name = (''TLBEntry31''),
  read_from = ((\<lambda> s . (TLBEntry31   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry31 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry30_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry30_ref = ( (|
  name = (''TLBEntry30''),
  read_from = ((\<lambda> s . (TLBEntry30   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry30 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry29_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry29_ref = ( (|
  name = (''TLBEntry29''),
  read_from = ((\<lambda> s . (TLBEntry29   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry29 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry28_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry28_ref = ( (|
  name = (''TLBEntry28''),
  read_from = ((\<lambda> s . (TLBEntry28   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry28 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry27_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry27_ref = ( (|
  name = (''TLBEntry27''),
  read_from = ((\<lambda> s . (TLBEntry27   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry27 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry26_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry26_ref = ( (|
  name = (''TLBEntry26''),
  read_from = ((\<lambda> s . (TLBEntry26   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry26 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry25_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry25_ref = ( (|
  name = (''TLBEntry25''),
  read_from = ((\<lambda> s . (TLBEntry25   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry25 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry24_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry24_ref = ( (|
  name = (''TLBEntry24''),
  read_from = ((\<lambda> s . (TLBEntry24   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry24 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry23_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry23_ref = ( (|
  name = (''TLBEntry23''),
  read_from = ((\<lambda> s . (TLBEntry23   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry23 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry22_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry22_ref = ( (|
  name = (''TLBEntry22''),
  read_from = ((\<lambda> s . (TLBEntry22   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry22 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry21_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry21_ref = ( (|
  name = (''TLBEntry21''),
  read_from = ((\<lambda> s . (TLBEntry21   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry21 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry20_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry20_ref = ( (|
  name = (''TLBEntry20''),
  read_from = ((\<lambda> s . (TLBEntry20   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry20 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry19_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry19_ref = ( (|
  name = (''TLBEntry19''),
  read_from = ((\<lambda> s . (TLBEntry19   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry19 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry18_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry18_ref = ( (|
  name = (''TLBEntry18''),
  read_from = ((\<lambda> s . (TLBEntry18   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry18 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry17_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry17_ref = ( (|
  name = (''TLBEntry17''),
  read_from = ((\<lambda> s . (TLBEntry17   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry17 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry16_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry16_ref = ( (|
  name = (''TLBEntry16''),
  read_from = ((\<lambda> s . (TLBEntry16   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry16 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry15_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry15_ref = ( (|
  name = (''TLBEntry15''),
  read_from = ((\<lambda> s . (TLBEntry15   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry15 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry14_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry14_ref = ( (|
  name = (''TLBEntry14''),
  read_from = ((\<lambda> s . (TLBEntry14   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry14 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry13_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry13_ref = ( (|
  name = (''TLBEntry13''),
  read_from = ((\<lambda> s . (TLBEntry13   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry13 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry12_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry12_ref = ( (|
  name = (''TLBEntry12''),
  read_from = ((\<lambda> s . (TLBEntry12   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry12 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry11_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry11_ref = ( (|
  name = (''TLBEntry11''),
  read_from = ((\<lambda> s . (TLBEntry11   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry11 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry10_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry10_ref = ( (|
  name = (''TLBEntry10''),
  read_from = ((\<lambda> s . (TLBEntry10   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry10 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry09_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry09_ref = ( (|
  name = (''TLBEntry09''),
  read_from = ((\<lambda> s . (TLBEntry09   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry09 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry08_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry08_ref = ( (|
  name = (''TLBEntry08''),
  read_from = ((\<lambda> s . (TLBEntry08   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry08 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry07_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry07_ref = ( (|
  name = (''TLBEntry07''),
  read_from = ((\<lambda> s . (TLBEntry07   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry07 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry06_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry06_ref = ( (|
  name = (''TLBEntry06''),
  read_from = ((\<lambda> s . (TLBEntry06   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry06 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry05_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry05_ref = ( (|
  name = (''TLBEntry05''),
  read_from = ((\<lambda> s . (TLBEntry05   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry05 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry04_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry04_ref = ( (|
  name = (''TLBEntry04''),
  read_from = ((\<lambda> s . (TLBEntry04   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry04 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry03_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry03_ref = ( (|
  name = (''TLBEntry03''),
  read_from = ((\<lambda> s . (TLBEntry03   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry03 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry02_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry02_ref = ( (|
  name = (''TLBEntry02''),
  read_from = ((\<lambda> s . (TLBEntry02   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry02 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry01_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry01_ref = ( (|
  name = (''TLBEntry01''),
  read_from = ((\<lambda> s . (TLBEntry01   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry01 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBEntry00_ref  :: \<open>((regstate),(register_value),(TLBEntry))register_ref \<close>  where 
     \<open> TLBEntry00_ref = ( (|
  name = (''TLBEntry00''),
  read_from = ((\<lambda> s . (TLBEntry00   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntry00 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntry_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntry v)) |) )\<close>


definition TLBXContext_ref  :: \<open>((regstate),(register_value),(XContextReg))register_ref \<close>  where 
     \<open> TLBXContext_ref = ( (|
  name = (''TLBXContext''),
  read_from = ((\<lambda> s . (TLBXContext   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBXContext := v |))))),
  of_regval = ((\<lambda> v .  XContextReg_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_XContextReg v)) |) )\<close>


definition TLBEntryHi_ref  :: \<open>((regstate),(register_value),(TLBEntryHiReg))register_ref \<close>  where 
     \<open> TLBEntryHi_ref = ( (|
  name = (''TLBEntryHi''),
  read_from = ((\<lambda> s . (TLBEntryHi   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntryHi := v |))))),
  of_regval = ((\<lambda> v .  TLBEntryHiReg_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntryHiReg v)) |) )\<close>


definition TLBWired_ref  :: \<open>((regstate),(register_value),((6)Word.word))register_ref \<close>  where 
     \<open> TLBWired_ref = ( (|
  name = (''TLBWired''),
  read_from = ((\<lambda> s . (TLBWired   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBWired := v |))))),
  of_regval = ((\<lambda> v .  bitvector_6_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_6_dec v)) |) )\<close>


definition TLBPageMask_ref  :: \<open>((regstate),(register_value),((16)Word.word))register_ref \<close>  where 
     \<open> TLBPageMask_ref = ( (|
  name = (''TLBPageMask''),
  read_from = ((\<lambda> s . (TLBPageMask   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBPageMask := v |))))),
  of_regval = ((\<lambda> v .  bitvector_16_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_16_dec v)) |) )\<close>


definition TLBContext_ref  :: \<open>((regstate),(register_value),(ContextReg))register_ref \<close>  where 
     \<open> TLBContext_ref = ( (|
  name = (''TLBContext''),
  read_from = ((\<lambda> s . (TLBContext   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBContext := v |))))),
  of_regval = ((\<lambda> v .  ContextReg_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_ContextReg v)) |) )\<close>


definition TLBEntryLo1_ref  :: \<open>((regstate),(register_value),(TLBEntryLoReg))register_ref \<close>  where 
     \<open> TLBEntryLo1_ref = ( (|
  name = (''TLBEntryLo1''),
  read_from = ((\<lambda> s . (TLBEntryLo1   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntryLo1 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntryLoReg_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntryLoReg v)) |) )\<close>


definition TLBEntryLo0_ref  :: \<open>((regstate),(register_value),(TLBEntryLoReg))register_ref \<close>  where 
     \<open> TLBEntryLo0_ref = ( (|
  name = (''TLBEntryLo0''),
  read_from = ((\<lambda> s . (TLBEntryLo0   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBEntryLo0 := v |))))),
  of_regval = ((\<lambda> v .  TLBEntryLoReg_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TLBEntryLoReg v)) |) )\<close>


definition TLBRandom_ref  :: \<open>((regstate),(register_value),((6)Word.word))register_ref \<close>  where 
     \<open> TLBRandom_ref = ( (|
  name = (''TLBRandom''),
  read_from = ((\<lambda> s . (TLBRandom   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBRandom := v |))))),
  of_regval = ((\<lambda> v .  bitvector_6_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_6_dec v)) |) )\<close>


definition TLBIndex_ref  :: \<open>((regstate),(register_value),((6)Word.word))register_ref \<close>  where 
     \<open> TLBIndex_ref = ( (|
  name = (''TLBIndex''),
  read_from = ((\<lambda> s . (TLBIndex   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBIndex := v |))))),
  of_regval = ((\<lambda> v .  bitvector_6_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_6_dec v)) |) )\<close>


definition TLBProbe_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> TLBProbe_ref = ( (|
  name = (''TLBProbe''),
  read_from = ((\<lambda> s . (TLBProbe   s))),
  write_to = ((\<lambda> v s .  (( s (| TLBProbe := v |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition NextPC_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> NextPC_ref = ( (|
  name = (''NextPC''),
  read_from = ((\<lambda> s . (NextPC   s))),
  write_to = ((\<lambda> v s .  (( s (| NextPC := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PC_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PC_ref = ( (|
  name = (''PC''),
  read_from = ((\<lambda> s . (PC   s))),
  write_to = ((\<lambda> v s .  (( s (| PC := v |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


\<comment> \<open>\<open>val get_regval : string -> regstate -> maybe register_value\<close>\<close>
definition get_regval  :: \<open> string \<Rightarrow> regstate \<Rightarrow>(register_value)option \<close>  where 
     \<open> get_regval reg_name s = (
  if reg_name = (''CID'') then Some ((regval_of   CID_ref) ((read_from   CID_ref) s)) else
  if reg_name = (''ErrorEPCC'') then Some ((regval_of   ErrorEPCC_ref) ((read_from   ErrorEPCC_ref) s)) else
  if reg_name = (''KDC'') then Some ((regval_of   KDC_ref) ((read_from   KDC_ref) s)) else
  if reg_name = (''KR2C'') then Some ((regval_of   KR2C_ref) ((read_from   KR2C_ref) s)) else
  if reg_name = (''KR1C'') then Some ((regval_of   KR1C_ref) ((read_from   KR1C_ref) s)) else
  if reg_name = (''CPLR'') then Some ((regval_of   CPLR_ref) ((read_from   CPLR_ref) s)) else
  if reg_name = (''CULR'') then Some ((regval_of   CULR_ref) ((read_from   CULR_ref) s)) else
  if reg_name = (''C31'') then Some ((regval_of   C31_ref) ((read_from   C31_ref) s)) else
  if reg_name = (''C30'') then Some ((regval_of   C30_ref) ((read_from   C30_ref) s)) else
  if reg_name = (''C29'') then Some ((regval_of   C29_ref) ((read_from   C29_ref) s)) else
  if reg_name = (''C28'') then Some ((regval_of   C28_ref) ((read_from   C28_ref) s)) else
  if reg_name = (''C27'') then Some ((regval_of   C27_ref) ((read_from   C27_ref) s)) else
  if reg_name = (''C26'') then Some ((regval_of   C26_ref) ((read_from   C26_ref) s)) else
  if reg_name = (''C25'') then Some ((regval_of   C25_ref) ((read_from   C25_ref) s)) else
  if reg_name = (''C24'') then Some ((regval_of   C24_ref) ((read_from   C24_ref) s)) else
  if reg_name = (''C23'') then Some ((regval_of   C23_ref) ((read_from   C23_ref) s)) else
  if reg_name = (''C22'') then Some ((regval_of   C22_ref) ((read_from   C22_ref) s)) else
  if reg_name = (''C21'') then Some ((regval_of   C21_ref) ((read_from   C21_ref) s)) else
  if reg_name = (''C20'') then Some ((regval_of   C20_ref) ((read_from   C20_ref) s)) else
  if reg_name = (''C19'') then Some ((regval_of   C19_ref) ((read_from   C19_ref) s)) else
  if reg_name = (''C18'') then Some ((regval_of   C18_ref) ((read_from   C18_ref) s)) else
  if reg_name = (''C17'') then Some ((regval_of   C17_ref) ((read_from   C17_ref) s)) else
  if reg_name = (''C16'') then Some ((regval_of   C16_ref) ((read_from   C16_ref) s)) else
  if reg_name = (''C15'') then Some ((regval_of   C15_ref) ((read_from   C15_ref) s)) else
  if reg_name = (''C14'') then Some ((regval_of   C14_ref) ((read_from   C14_ref) s)) else
  if reg_name = (''C13'') then Some ((regval_of   C13_ref) ((read_from   C13_ref) s)) else
  if reg_name = (''C12'') then Some ((regval_of   C12_ref) ((read_from   C12_ref) s)) else
  if reg_name = (''C11'') then Some ((regval_of   C11_ref) ((read_from   C11_ref) s)) else
  if reg_name = (''C10'') then Some ((regval_of   C10_ref) ((read_from   C10_ref) s)) else
  if reg_name = (''C09'') then Some ((regval_of   C09_ref) ((read_from   C09_ref) s)) else
  if reg_name = (''C08'') then Some ((regval_of   C08_ref) ((read_from   C08_ref) s)) else
  if reg_name = (''C07'') then Some ((regval_of   C07_ref) ((read_from   C07_ref) s)) else
  if reg_name = (''C06'') then Some ((regval_of   C06_ref) ((read_from   C06_ref) s)) else
  if reg_name = (''C05'') then Some ((regval_of   C05_ref) ((read_from   C05_ref) s)) else
  if reg_name = (''C04'') then Some ((regval_of   C04_ref) ((read_from   C04_ref) s)) else
  if reg_name = (''C03'') then Some ((regval_of   C03_ref) ((read_from   C03_ref) s)) else
  if reg_name = (''C02'') then Some ((regval_of   C02_ref) ((read_from   C02_ref) s)) else
  if reg_name = (''C01'') then Some ((regval_of   C01_ref) ((read_from   C01_ref) s)) else
  if reg_name = (''DDC'') then Some ((regval_of   DDC_ref) ((read_from   DDC_ref) s)) else
  if reg_name = (''CapCause'') then Some ((regval_of   CapCause_ref) ((read_from   CapCause_ref) s)) else
  if reg_name = (''NextPCC'') then Some ((regval_of   NextPCC_ref) ((read_from   NextPCC_ref) s)) else
  if reg_name = (''DelayedPCC'') then Some ((regval_of   DelayedPCC_ref) ((read_from   DelayedPCC_ref) s)) else
  if reg_name = (''PCC'') then Some ((regval_of   PCC_ref) ((read_from   PCC_ref) s)) else
  if reg_name = (''KCC'') then Some ((regval_of   KCC_ref) ((read_from   KCC_ref) s)) else
  if reg_name = (''EPCC'') then Some ((regval_of   EPCC_ref) ((read_from   EPCC_ref) s)) else
  if reg_name = (''UART_RVALID'') then Some ((regval_of   UART_RVALID_ref) ((read_from   UART_RVALID_ref) s)) else
  if reg_name = (''UART_RDATA'') then Some ((regval_of   UART_RDATA_ref) ((read_from   UART_RDATA_ref) s)) else
  if reg_name = (''UART_WRITTEN'') then Some ((regval_of   UART_WRITTEN_ref) ((read_from   UART_WRITTEN_ref) s)) else
  if reg_name = (''UART_WDATA'') then Some ((regval_of   UART_WDATA_ref) ((read_from   UART_WDATA_ref) s)) else
  if reg_name = (''GPR'') then Some ((regval_of   GPR_ref) ((read_from   GPR_ref) s)) else
  if reg_name = (''LO'') then Some ((regval_of   LO_ref) ((read_from   LO_ref) s)) else
  if reg_name = (''HI'') then Some ((regval_of   HI_ref) ((read_from   HI_ref) s)) else
  if reg_name = (''DelayedPC'') then Some ((regval_of   DelayedPC_ref) ((read_from   DelayedPC_ref) s)) else
  if reg_name = (''BranchPending'') then Some ((regval_of   BranchPending_ref) ((read_from   BranchPending_ref) s)) else
  if reg_name = (''InBranchDelay'') then Some ((regval_of   InBranchDelay_ref) ((read_from   InBranchDelay_ref) s)) else
  if reg_name = (''NextInBranchDelay'') then Some ((regval_of   NextInBranchDelay_ref) ((read_from   NextInBranchDelay_ref) s)) else
  if reg_name = (''CP0Status'') then Some ((regval_of   CP0Status_ref) ((read_from   CP0Status_ref) s)) else
  if reg_name = (''CP0ConfigK0'') then Some ((regval_of   CP0ConfigK0_ref) ((read_from   CP0ConfigK0_ref) s)) else
  if reg_name = (''CP0UserLocal'') then Some ((regval_of   CP0UserLocal_ref) ((read_from   CP0UserLocal_ref) s)) else
  if reg_name = (''CP0HWREna'') then Some ((regval_of   CP0HWREna_ref) ((read_from   CP0HWREna_ref) s)) else
  if reg_name = (''CP0Count'') then Some ((regval_of   CP0Count_ref) ((read_from   CP0Count_ref) s)) else
  if reg_name = (''CP0BadInstrP'') then Some ((regval_of   CP0BadInstrP_ref) ((read_from   CP0BadInstrP_ref) s)) else
  if reg_name = (''CP0BadInstr'') then Some ((regval_of   CP0BadInstr_ref) ((read_from   CP0BadInstr_ref) s)) else
  if reg_name = (''LastInstrBits'') then Some ((regval_of   LastInstrBits_ref) ((read_from   LastInstrBits_ref) s)) else
  if reg_name = (''CurrentInstrBits'') then Some ((regval_of   CurrentInstrBits_ref) ((read_from   CurrentInstrBits_ref) s)) else
  if reg_name = (''CP0BadVAddr'') then Some ((regval_of   CP0BadVAddr_ref) ((read_from   CP0BadVAddr_ref) s)) else
  if reg_name = (''CP0LLAddr'') then Some ((regval_of   CP0LLAddr_ref) ((read_from   CP0LLAddr_ref) s)) else
  if reg_name = (''CP0LLBit'') then Some ((regval_of   CP0LLBit_ref) ((read_from   CP0LLBit_ref) s)) else
  if reg_name = (''CP0Cause'') then Some ((regval_of   CP0Cause_ref) ((read_from   CP0Cause_ref) s)) else
  if reg_name = (''CP0Compare'') then Some ((regval_of   CP0Compare_ref) ((read_from   CP0Compare_ref) s)) else
  if reg_name = (''TLBEntry63'') then Some ((regval_of   TLBEntry63_ref) ((read_from   TLBEntry63_ref) s)) else
  if reg_name = (''TLBEntry62'') then Some ((regval_of   TLBEntry62_ref) ((read_from   TLBEntry62_ref) s)) else
  if reg_name = (''TLBEntry61'') then Some ((regval_of   TLBEntry61_ref) ((read_from   TLBEntry61_ref) s)) else
  if reg_name = (''TLBEntry60'') then Some ((regval_of   TLBEntry60_ref) ((read_from   TLBEntry60_ref) s)) else
  if reg_name = (''TLBEntry59'') then Some ((regval_of   TLBEntry59_ref) ((read_from   TLBEntry59_ref) s)) else
  if reg_name = (''TLBEntry58'') then Some ((regval_of   TLBEntry58_ref) ((read_from   TLBEntry58_ref) s)) else
  if reg_name = (''TLBEntry57'') then Some ((regval_of   TLBEntry57_ref) ((read_from   TLBEntry57_ref) s)) else
  if reg_name = (''TLBEntry56'') then Some ((regval_of   TLBEntry56_ref) ((read_from   TLBEntry56_ref) s)) else
  if reg_name = (''TLBEntry55'') then Some ((regval_of   TLBEntry55_ref) ((read_from   TLBEntry55_ref) s)) else
  if reg_name = (''TLBEntry54'') then Some ((regval_of   TLBEntry54_ref) ((read_from   TLBEntry54_ref) s)) else
  if reg_name = (''TLBEntry53'') then Some ((regval_of   TLBEntry53_ref) ((read_from   TLBEntry53_ref) s)) else
  if reg_name = (''TLBEntry52'') then Some ((regval_of   TLBEntry52_ref) ((read_from   TLBEntry52_ref) s)) else
  if reg_name = (''TLBEntry51'') then Some ((regval_of   TLBEntry51_ref) ((read_from   TLBEntry51_ref) s)) else
  if reg_name = (''TLBEntry50'') then Some ((regval_of   TLBEntry50_ref) ((read_from   TLBEntry50_ref) s)) else
  if reg_name = (''TLBEntry49'') then Some ((regval_of   TLBEntry49_ref) ((read_from   TLBEntry49_ref) s)) else
  if reg_name = (''TLBEntry48'') then Some ((regval_of   TLBEntry48_ref) ((read_from   TLBEntry48_ref) s)) else
  if reg_name = (''TLBEntry47'') then Some ((regval_of   TLBEntry47_ref) ((read_from   TLBEntry47_ref) s)) else
  if reg_name = (''TLBEntry46'') then Some ((regval_of   TLBEntry46_ref) ((read_from   TLBEntry46_ref) s)) else
  if reg_name = (''TLBEntry45'') then Some ((regval_of   TLBEntry45_ref) ((read_from   TLBEntry45_ref) s)) else
  if reg_name = (''TLBEntry44'') then Some ((regval_of   TLBEntry44_ref) ((read_from   TLBEntry44_ref) s)) else
  if reg_name = (''TLBEntry43'') then Some ((regval_of   TLBEntry43_ref) ((read_from   TLBEntry43_ref) s)) else
  if reg_name = (''TLBEntry42'') then Some ((regval_of   TLBEntry42_ref) ((read_from   TLBEntry42_ref) s)) else
  if reg_name = (''TLBEntry41'') then Some ((regval_of   TLBEntry41_ref) ((read_from   TLBEntry41_ref) s)) else
  if reg_name = (''TLBEntry40'') then Some ((regval_of   TLBEntry40_ref) ((read_from   TLBEntry40_ref) s)) else
  if reg_name = (''TLBEntry39'') then Some ((regval_of   TLBEntry39_ref) ((read_from   TLBEntry39_ref) s)) else
  if reg_name = (''TLBEntry38'') then Some ((regval_of   TLBEntry38_ref) ((read_from   TLBEntry38_ref) s)) else
  if reg_name = (''TLBEntry37'') then Some ((regval_of   TLBEntry37_ref) ((read_from   TLBEntry37_ref) s)) else
  if reg_name = (''TLBEntry36'') then Some ((regval_of   TLBEntry36_ref) ((read_from   TLBEntry36_ref) s)) else
  if reg_name = (''TLBEntry35'') then Some ((regval_of   TLBEntry35_ref) ((read_from   TLBEntry35_ref) s)) else
  if reg_name = (''TLBEntry34'') then Some ((regval_of   TLBEntry34_ref) ((read_from   TLBEntry34_ref) s)) else
  if reg_name = (''TLBEntry33'') then Some ((regval_of   TLBEntry33_ref) ((read_from   TLBEntry33_ref) s)) else
  if reg_name = (''TLBEntry32'') then Some ((regval_of   TLBEntry32_ref) ((read_from   TLBEntry32_ref) s)) else
  if reg_name = (''TLBEntry31'') then Some ((regval_of   TLBEntry31_ref) ((read_from   TLBEntry31_ref) s)) else
  if reg_name = (''TLBEntry30'') then Some ((regval_of   TLBEntry30_ref) ((read_from   TLBEntry30_ref) s)) else
  if reg_name = (''TLBEntry29'') then Some ((regval_of   TLBEntry29_ref) ((read_from   TLBEntry29_ref) s)) else
  if reg_name = (''TLBEntry28'') then Some ((regval_of   TLBEntry28_ref) ((read_from   TLBEntry28_ref) s)) else
  if reg_name = (''TLBEntry27'') then Some ((regval_of   TLBEntry27_ref) ((read_from   TLBEntry27_ref) s)) else
  if reg_name = (''TLBEntry26'') then Some ((regval_of   TLBEntry26_ref) ((read_from   TLBEntry26_ref) s)) else
  if reg_name = (''TLBEntry25'') then Some ((regval_of   TLBEntry25_ref) ((read_from   TLBEntry25_ref) s)) else
  if reg_name = (''TLBEntry24'') then Some ((regval_of   TLBEntry24_ref) ((read_from   TLBEntry24_ref) s)) else
  if reg_name = (''TLBEntry23'') then Some ((regval_of   TLBEntry23_ref) ((read_from   TLBEntry23_ref) s)) else
  if reg_name = (''TLBEntry22'') then Some ((regval_of   TLBEntry22_ref) ((read_from   TLBEntry22_ref) s)) else
  if reg_name = (''TLBEntry21'') then Some ((regval_of   TLBEntry21_ref) ((read_from   TLBEntry21_ref) s)) else
  if reg_name = (''TLBEntry20'') then Some ((regval_of   TLBEntry20_ref) ((read_from   TLBEntry20_ref) s)) else
  if reg_name = (''TLBEntry19'') then Some ((regval_of   TLBEntry19_ref) ((read_from   TLBEntry19_ref) s)) else
  if reg_name = (''TLBEntry18'') then Some ((regval_of   TLBEntry18_ref) ((read_from   TLBEntry18_ref) s)) else
  if reg_name = (''TLBEntry17'') then Some ((regval_of   TLBEntry17_ref) ((read_from   TLBEntry17_ref) s)) else
  if reg_name = (''TLBEntry16'') then Some ((regval_of   TLBEntry16_ref) ((read_from   TLBEntry16_ref) s)) else
  if reg_name = (''TLBEntry15'') then Some ((regval_of   TLBEntry15_ref) ((read_from   TLBEntry15_ref) s)) else
  if reg_name = (''TLBEntry14'') then Some ((regval_of   TLBEntry14_ref) ((read_from   TLBEntry14_ref) s)) else
  if reg_name = (''TLBEntry13'') then Some ((regval_of   TLBEntry13_ref) ((read_from   TLBEntry13_ref) s)) else
  if reg_name = (''TLBEntry12'') then Some ((regval_of   TLBEntry12_ref) ((read_from   TLBEntry12_ref) s)) else
  if reg_name = (''TLBEntry11'') then Some ((regval_of   TLBEntry11_ref) ((read_from   TLBEntry11_ref) s)) else
  if reg_name = (''TLBEntry10'') then Some ((regval_of   TLBEntry10_ref) ((read_from   TLBEntry10_ref) s)) else
  if reg_name = (''TLBEntry09'') then Some ((regval_of   TLBEntry09_ref) ((read_from   TLBEntry09_ref) s)) else
  if reg_name = (''TLBEntry08'') then Some ((regval_of   TLBEntry08_ref) ((read_from   TLBEntry08_ref) s)) else
  if reg_name = (''TLBEntry07'') then Some ((regval_of   TLBEntry07_ref) ((read_from   TLBEntry07_ref) s)) else
  if reg_name = (''TLBEntry06'') then Some ((regval_of   TLBEntry06_ref) ((read_from   TLBEntry06_ref) s)) else
  if reg_name = (''TLBEntry05'') then Some ((regval_of   TLBEntry05_ref) ((read_from   TLBEntry05_ref) s)) else
  if reg_name = (''TLBEntry04'') then Some ((regval_of   TLBEntry04_ref) ((read_from   TLBEntry04_ref) s)) else
  if reg_name = (''TLBEntry03'') then Some ((regval_of   TLBEntry03_ref) ((read_from   TLBEntry03_ref) s)) else
  if reg_name = (''TLBEntry02'') then Some ((regval_of   TLBEntry02_ref) ((read_from   TLBEntry02_ref) s)) else
  if reg_name = (''TLBEntry01'') then Some ((regval_of   TLBEntry01_ref) ((read_from   TLBEntry01_ref) s)) else
  if reg_name = (''TLBEntry00'') then Some ((regval_of   TLBEntry00_ref) ((read_from   TLBEntry00_ref) s)) else
  if reg_name = (''TLBXContext'') then Some ((regval_of   TLBXContext_ref) ((read_from   TLBXContext_ref) s)) else
  if reg_name = (''TLBEntryHi'') then Some ((regval_of   TLBEntryHi_ref) ((read_from   TLBEntryHi_ref) s)) else
  if reg_name = (''TLBWired'') then Some ((regval_of   TLBWired_ref) ((read_from   TLBWired_ref) s)) else
  if reg_name = (''TLBPageMask'') then Some ((regval_of   TLBPageMask_ref) ((read_from   TLBPageMask_ref) s)) else
  if reg_name = (''TLBContext'') then Some ((regval_of   TLBContext_ref) ((read_from   TLBContext_ref) s)) else
  if reg_name = (''TLBEntryLo1'') then Some ((regval_of   TLBEntryLo1_ref) ((read_from   TLBEntryLo1_ref) s)) else
  if reg_name = (''TLBEntryLo0'') then Some ((regval_of   TLBEntryLo0_ref) ((read_from   TLBEntryLo0_ref) s)) else
  if reg_name = (''TLBRandom'') then Some ((regval_of   TLBRandom_ref) ((read_from   TLBRandom_ref) s)) else
  if reg_name = (''TLBIndex'') then Some ((regval_of   TLBIndex_ref) ((read_from   TLBIndex_ref) s)) else
  if reg_name = (''TLBProbe'') then Some ((regval_of   TLBProbe_ref) ((read_from   TLBProbe_ref) s)) else
  if reg_name = (''NextPC'') then Some ((regval_of   NextPC_ref) ((read_from   NextPC_ref) s)) else
  if reg_name = (''PC'') then Some ((regval_of   PC_ref) ((read_from   PC_ref) s)) else
  None )\<close> 
  for  reg_name  :: " string " 
  and  s  :: " regstate "


\<comment> \<open>\<open>val set_regval : string -> register_value -> regstate -> maybe regstate\<close>\<close>
definition set_regval  :: \<open> string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option \<close>  where 
     \<open> set_regval reg_name v s = (
  if reg_name = (''CID'') then map_option ((\<lambda> v . (write_to   CID_ref) v s)) ((of_regval   CID_ref) v) else
  if reg_name = (''ErrorEPCC'') then map_option ((\<lambda> v . (write_to   ErrorEPCC_ref) v s)) ((of_regval   ErrorEPCC_ref) v) else
  if reg_name = (''KDC'') then map_option ((\<lambda> v . (write_to   KDC_ref) v s)) ((of_regval   KDC_ref) v) else
  if reg_name = (''KR2C'') then map_option ((\<lambda> v . (write_to   KR2C_ref) v s)) ((of_regval   KR2C_ref) v) else
  if reg_name = (''KR1C'') then map_option ((\<lambda> v . (write_to   KR1C_ref) v s)) ((of_regval   KR1C_ref) v) else
  if reg_name = (''CPLR'') then map_option ((\<lambda> v . (write_to   CPLR_ref) v s)) ((of_regval   CPLR_ref) v) else
  if reg_name = (''CULR'') then map_option ((\<lambda> v . (write_to   CULR_ref) v s)) ((of_regval   CULR_ref) v) else
  if reg_name = (''C31'') then map_option ((\<lambda> v . (write_to   C31_ref) v s)) ((of_regval   C31_ref) v) else
  if reg_name = (''C30'') then map_option ((\<lambda> v . (write_to   C30_ref) v s)) ((of_regval   C30_ref) v) else
  if reg_name = (''C29'') then map_option ((\<lambda> v . (write_to   C29_ref) v s)) ((of_regval   C29_ref) v) else
  if reg_name = (''C28'') then map_option ((\<lambda> v . (write_to   C28_ref) v s)) ((of_regval   C28_ref) v) else
  if reg_name = (''C27'') then map_option ((\<lambda> v . (write_to   C27_ref) v s)) ((of_regval   C27_ref) v) else
  if reg_name = (''C26'') then map_option ((\<lambda> v . (write_to   C26_ref) v s)) ((of_regval   C26_ref) v) else
  if reg_name = (''C25'') then map_option ((\<lambda> v . (write_to   C25_ref) v s)) ((of_regval   C25_ref) v) else
  if reg_name = (''C24'') then map_option ((\<lambda> v . (write_to   C24_ref) v s)) ((of_regval   C24_ref) v) else
  if reg_name = (''C23'') then map_option ((\<lambda> v . (write_to   C23_ref) v s)) ((of_regval   C23_ref) v) else
  if reg_name = (''C22'') then map_option ((\<lambda> v . (write_to   C22_ref) v s)) ((of_regval   C22_ref) v) else
  if reg_name = (''C21'') then map_option ((\<lambda> v . (write_to   C21_ref) v s)) ((of_regval   C21_ref) v) else
  if reg_name = (''C20'') then map_option ((\<lambda> v . (write_to   C20_ref) v s)) ((of_regval   C20_ref) v) else
  if reg_name = (''C19'') then map_option ((\<lambda> v . (write_to   C19_ref) v s)) ((of_regval   C19_ref) v) else
  if reg_name = (''C18'') then map_option ((\<lambda> v . (write_to   C18_ref) v s)) ((of_regval   C18_ref) v) else
  if reg_name = (''C17'') then map_option ((\<lambda> v . (write_to   C17_ref) v s)) ((of_regval   C17_ref) v) else
  if reg_name = (''C16'') then map_option ((\<lambda> v . (write_to   C16_ref) v s)) ((of_regval   C16_ref) v) else
  if reg_name = (''C15'') then map_option ((\<lambda> v . (write_to   C15_ref) v s)) ((of_regval   C15_ref) v) else
  if reg_name = (''C14'') then map_option ((\<lambda> v . (write_to   C14_ref) v s)) ((of_regval   C14_ref) v) else
  if reg_name = (''C13'') then map_option ((\<lambda> v . (write_to   C13_ref) v s)) ((of_regval   C13_ref) v) else
  if reg_name = (''C12'') then map_option ((\<lambda> v . (write_to   C12_ref) v s)) ((of_regval   C12_ref) v) else
  if reg_name = (''C11'') then map_option ((\<lambda> v . (write_to   C11_ref) v s)) ((of_regval   C11_ref) v) else
  if reg_name = (''C10'') then map_option ((\<lambda> v . (write_to   C10_ref) v s)) ((of_regval   C10_ref) v) else
  if reg_name = (''C09'') then map_option ((\<lambda> v . (write_to   C09_ref) v s)) ((of_regval   C09_ref) v) else
  if reg_name = (''C08'') then map_option ((\<lambda> v . (write_to   C08_ref) v s)) ((of_regval   C08_ref) v) else
  if reg_name = (''C07'') then map_option ((\<lambda> v . (write_to   C07_ref) v s)) ((of_regval   C07_ref) v) else
  if reg_name = (''C06'') then map_option ((\<lambda> v . (write_to   C06_ref) v s)) ((of_regval   C06_ref) v) else
  if reg_name = (''C05'') then map_option ((\<lambda> v . (write_to   C05_ref) v s)) ((of_regval   C05_ref) v) else
  if reg_name = (''C04'') then map_option ((\<lambda> v . (write_to   C04_ref) v s)) ((of_regval   C04_ref) v) else
  if reg_name = (''C03'') then map_option ((\<lambda> v . (write_to   C03_ref) v s)) ((of_regval   C03_ref) v) else
  if reg_name = (''C02'') then map_option ((\<lambda> v . (write_to   C02_ref) v s)) ((of_regval   C02_ref) v) else
  if reg_name = (''C01'') then map_option ((\<lambda> v . (write_to   C01_ref) v s)) ((of_regval   C01_ref) v) else
  if reg_name = (''DDC'') then map_option ((\<lambda> v . (write_to   DDC_ref) v s)) ((of_regval   DDC_ref) v) else
  if reg_name = (''CapCause'') then map_option ((\<lambda> v . (write_to   CapCause_ref) v s)) ((of_regval   CapCause_ref) v) else
  if reg_name = (''NextPCC'') then map_option ((\<lambda> v . (write_to   NextPCC_ref) v s)) ((of_regval   NextPCC_ref) v) else
  if reg_name = (''DelayedPCC'') then map_option ((\<lambda> v . (write_to   DelayedPCC_ref) v s)) ((of_regval   DelayedPCC_ref) v) else
  if reg_name = (''PCC'') then map_option ((\<lambda> v . (write_to   PCC_ref) v s)) ((of_regval   PCC_ref) v) else
  if reg_name = (''KCC'') then map_option ((\<lambda> v . (write_to   KCC_ref) v s)) ((of_regval   KCC_ref) v) else
  if reg_name = (''EPCC'') then map_option ((\<lambda> v . (write_to   EPCC_ref) v s)) ((of_regval   EPCC_ref) v) else
  if reg_name = (''UART_RVALID'') then map_option ((\<lambda> v . (write_to   UART_RVALID_ref) v s)) ((of_regval   UART_RVALID_ref) v) else
  if reg_name = (''UART_RDATA'') then map_option ((\<lambda> v . (write_to   UART_RDATA_ref) v s)) ((of_regval   UART_RDATA_ref) v) else
  if reg_name = (''UART_WRITTEN'') then map_option ((\<lambda> v . (write_to   UART_WRITTEN_ref) v s)) ((of_regval   UART_WRITTEN_ref) v) else
  if reg_name = (''UART_WDATA'') then map_option ((\<lambda> v . (write_to   UART_WDATA_ref) v s)) ((of_regval   UART_WDATA_ref) v) else
  if reg_name = (''GPR'') then map_option ((\<lambda> v . (write_to   GPR_ref) v s)) ((of_regval   GPR_ref) v) else
  if reg_name = (''LO'') then map_option ((\<lambda> v . (write_to   LO_ref) v s)) ((of_regval   LO_ref) v) else
  if reg_name = (''HI'') then map_option ((\<lambda> v . (write_to   HI_ref) v s)) ((of_regval   HI_ref) v) else
  if reg_name = (''DelayedPC'') then map_option ((\<lambda> v . (write_to   DelayedPC_ref) v s)) ((of_regval   DelayedPC_ref) v) else
  if reg_name = (''BranchPending'') then map_option ((\<lambda> v . (write_to   BranchPending_ref) v s)) ((of_regval   BranchPending_ref) v) else
  if reg_name = (''InBranchDelay'') then map_option ((\<lambda> v . (write_to   InBranchDelay_ref) v s)) ((of_regval   InBranchDelay_ref) v) else
  if reg_name = (''NextInBranchDelay'') then map_option ((\<lambda> v . (write_to   NextInBranchDelay_ref) v s)) ((of_regval   NextInBranchDelay_ref) v) else
  if reg_name = (''CP0Status'') then map_option ((\<lambda> v . (write_to   CP0Status_ref) v s)) ((of_regval   CP0Status_ref) v) else
  if reg_name = (''CP0ConfigK0'') then map_option ((\<lambda> v . (write_to   CP0ConfigK0_ref) v s)) ((of_regval   CP0ConfigK0_ref) v) else
  if reg_name = (''CP0UserLocal'') then map_option ((\<lambda> v . (write_to   CP0UserLocal_ref) v s)) ((of_regval   CP0UserLocal_ref) v) else
  if reg_name = (''CP0HWREna'') then map_option ((\<lambda> v . (write_to   CP0HWREna_ref) v s)) ((of_regval   CP0HWREna_ref) v) else
  if reg_name = (''CP0Count'') then map_option ((\<lambda> v . (write_to   CP0Count_ref) v s)) ((of_regval   CP0Count_ref) v) else
  if reg_name = (''CP0BadInstrP'') then map_option ((\<lambda> v . (write_to   CP0BadInstrP_ref) v s)) ((of_regval   CP0BadInstrP_ref) v) else
  if reg_name = (''CP0BadInstr'') then map_option ((\<lambda> v . (write_to   CP0BadInstr_ref) v s)) ((of_regval   CP0BadInstr_ref) v) else
  if reg_name = (''LastInstrBits'') then map_option ((\<lambda> v . (write_to   LastInstrBits_ref) v s)) ((of_regval   LastInstrBits_ref) v) else
  if reg_name = (''CurrentInstrBits'') then map_option ((\<lambda> v . (write_to   CurrentInstrBits_ref) v s)) ((of_regval   CurrentInstrBits_ref) v) else
  if reg_name = (''CP0BadVAddr'') then map_option ((\<lambda> v . (write_to   CP0BadVAddr_ref) v s)) ((of_regval   CP0BadVAddr_ref) v) else
  if reg_name = (''CP0LLAddr'') then map_option ((\<lambda> v . (write_to   CP0LLAddr_ref) v s)) ((of_regval   CP0LLAddr_ref) v) else
  if reg_name = (''CP0LLBit'') then map_option ((\<lambda> v . (write_to   CP0LLBit_ref) v s)) ((of_regval   CP0LLBit_ref) v) else
  if reg_name = (''CP0Cause'') then map_option ((\<lambda> v . (write_to   CP0Cause_ref) v s)) ((of_regval   CP0Cause_ref) v) else
  if reg_name = (''CP0Compare'') then map_option ((\<lambda> v . (write_to   CP0Compare_ref) v s)) ((of_regval   CP0Compare_ref) v) else
  if reg_name = (''TLBEntry63'') then map_option ((\<lambda> v . (write_to   TLBEntry63_ref) v s)) ((of_regval   TLBEntry63_ref) v) else
  if reg_name = (''TLBEntry62'') then map_option ((\<lambda> v . (write_to   TLBEntry62_ref) v s)) ((of_regval   TLBEntry62_ref) v) else
  if reg_name = (''TLBEntry61'') then map_option ((\<lambda> v . (write_to   TLBEntry61_ref) v s)) ((of_regval   TLBEntry61_ref) v) else
  if reg_name = (''TLBEntry60'') then map_option ((\<lambda> v . (write_to   TLBEntry60_ref) v s)) ((of_regval   TLBEntry60_ref) v) else
  if reg_name = (''TLBEntry59'') then map_option ((\<lambda> v . (write_to   TLBEntry59_ref) v s)) ((of_regval   TLBEntry59_ref) v) else
  if reg_name = (''TLBEntry58'') then map_option ((\<lambda> v . (write_to   TLBEntry58_ref) v s)) ((of_regval   TLBEntry58_ref) v) else
  if reg_name = (''TLBEntry57'') then map_option ((\<lambda> v . (write_to   TLBEntry57_ref) v s)) ((of_regval   TLBEntry57_ref) v) else
  if reg_name = (''TLBEntry56'') then map_option ((\<lambda> v . (write_to   TLBEntry56_ref) v s)) ((of_regval   TLBEntry56_ref) v) else
  if reg_name = (''TLBEntry55'') then map_option ((\<lambda> v . (write_to   TLBEntry55_ref) v s)) ((of_regval   TLBEntry55_ref) v) else
  if reg_name = (''TLBEntry54'') then map_option ((\<lambda> v . (write_to   TLBEntry54_ref) v s)) ((of_regval   TLBEntry54_ref) v) else
  if reg_name = (''TLBEntry53'') then map_option ((\<lambda> v . (write_to   TLBEntry53_ref) v s)) ((of_regval   TLBEntry53_ref) v) else
  if reg_name = (''TLBEntry52'') then map_option ((\<lambda> v . (write_to   TLBEntry52_ref) v s)) ((of_regval   TLBEntry52_ref) v) else
  if reg_name = (''TLBEntry51'') then map_option ((\<lambda> v . (write_to   TLBEntry51_ref) v s)) ((of_regval   TLBEntry51_ref) v) else
  if reg_name = (''TLBEntry50'') then map_option ((\<lambda> v . (write_to   TLBEntry50_ref) v s)) ((of_regval   TLBEntry50_ref) v) else
  if reg_name = (''TLBEntry49'') then map_option ((\<lambda> v . (write_to   TLBEntry49_ref) v s)) ((of_regval   TLBEntry49_ref) v) else
  if reg_name = (''TLBEntry48'') then map_option ((\<lambda> v . (write_to   TLBEntry48_ref) v s)) ((of_regval   TLBEntry48_ref) v) else
  if reg_name = (''TLBEntry47'') then map_option ((\<lambda> v . (write_to   TLBEntry47_ref) v s)) ((of_regval   TLBEntry47_ref) v) else
  if reg_name = (''TLBEntry46'') then map_option ((\<lambda> v . (write_to   TLBEntry46_ref) v s)) ((of_regval   TLBEntry46_ref) v) else
  if reg_name = (''TLBEntry45'') then map_option ((\<lambda> v . (write_to   TLBEntry45_ref) v s)) ((of_regval   TLBEntry45_ref) v) else
  if reg_name = (''TLBEntry44'') then map_option ((\<lambda> v . (write_to   TLBEntry44_ref) v s)) ((of_regval   TLBEntry44_ref) v) else
  if reg_name = (''TLBEntry43'') then map_option ((\<lambda> v . (write_to   TLBEntry43_ref) v s)) ((of_regval   TLBEntry43_ref) v) else
  if reg_name = (''TLBEntry42'') then map_option ((\<lambda> v . (write_to   TLBEntry42_ref) v s)) ((of_regval   TLBEntry42_ref) v) else
  if reg_name = (''TLBEntry41'') then map_option ((\<lambda> v . (write_to   TLBEntry41_ref) v s)) ((of_regval   TLBEntry41_ref) v) else
  if reg_name = (''TLBEntry40'') then map_option ((\<lambda> v . (write_to   TLBEntry40_ref) v s)) ((of_regval   TLBEntry40_ref) v) else
  if reg_name = (''TLBEntry39'') then map_option ((\<lambda> v . (write_to   TLBEntry39_ref) v s)) ((of_regval   TLBEntry39_ref) v) else
  if reg_name = (''TLBEntry38'') then map_option ((\<lambda> v . (write_to   TLBEntry38_ref) v s)) ((of_regval   TLBEntry38_ref) v) else
  if reg_name = (''TLBEntry37'') then map_option ((\<lambda> v . (write_to   TLBEntry37_ref) v s)) ((of_regval   TLBEntry37_ref) v) else
  if reg_name = (''TLBEntry36'') then map_option ((\<lambda> v . (write_to   TLBEntry36_ref) v s)) ((of_regval   TLBEntry36_ref) v) else
  if reg_name = (''TLBEntry35'') then map_option ((\<lambda> v . (write_to   TLBEntry35_ref) v s)) ((of_regval   TLBEntry35_ref) v) else
  if reg_name = (''TLBEntry34'') then map_option ((\<lambda> v . (write_to   TLBEntry34_ref) v s)) ((of_regval   TLBEntry34_ref) v) else
  if reg_name = (''TLBEntry33'') then map_option ((\<lambda> v . (write_to   TLBEntry33_ref) v s)) ((of_regval   TLBEntry33_ref) v) else
  if reg_name = (''TLBEntry32'') then map_option ((\<lambda> v . (write_to   TLBEntry32_ref) v s)) ((of_regval   TLBEntry32_ref) v) else
  if reg_name = (''TLBEntry31'') then map_option ((\<lambda> v . (write_to   TLBEntry31_ref) v s)) ((of_regval   TLBEntry31_ref) v) else
  if reg_name = (''TLBEntry30'') then map_option ((\<lambda> v . (write_to   TLBEntry30_ref) v s)) ((of_regval   TLBEntry30_ref) v) else
  if reg_name = (''TLBEntry29'') then map_option ((\<lambda> v . (write_to   TLBEntry29_ref) v s)) ((of_regval   TLBEntry29_ref) v) else
  if reg_name = (''TLBEntry28'') then map_option ((\<lambda> v . (write_to   TLBEntry28_ref) v s)) ((of_regval   TLBEntry28_ref) v) else
  if reg_name = (''TLBEntry27'') then map_option ((\<lambda> v . (write_to   TLBEntry27_ref) v s)) ((of_regval   TLBEntry27_ref) v) else
  if reg_name = (''TLBEntry26'') then map_option ((\<lambda> v . (write_to   TLBEntry26_ref) v s)) ((of_regval   TLBEntry26_ref) v) else
  if reg_name = (''TLBEntry25'') then map_option ((\<lambda> v . (write_to   TLBEntry25_ref) v s)) ((of_regval   TLBEntry25_ref) v) else
  if reg_name = (''TLBEntry24'') then map_option ((\<lambda> v . (write_to   TLBEntry24_ref) v s)) ((of_regval   TLBEntry24_ref) v) else
  if reg_name = (''TLBEntry23'') then map_option ((\<lambda> v . (write_to   TLBEntry23_ref) v s)) ((of_regval   TLBEntry23_ref) v) else
  if reg_name = (''TLBEntry22'') then map_option ((\<lambda> v . (write_to   TLBEntry22_ref) v s)) ((of_regval   TLBEntry22_ref) v) else
  if reg_name = (''TLBEntry21'') then map_option ((\<lambda> v . (write_to   TLBEntry21_ref) v s)) ((of_regval   TLBEntry21_ref) v) else
  if reg_name = (''TLBEntry20'') then map_option ((\<lambda> v . (write_to   TLBEntry20_ref) v s)) ((of_regval   TLBEntry20_ref) v) else
  if reg_name = (''TLBEntry19'') then map_option ((\<lambda> v . (write_to   TLBEntry19_ref) v s)) ((of_regval   TLBEntry19_ref) v) else
  if reg_name = (''TLBEntry18'') then map_option ((\<lambda> v . (write_to   TLBEntry18_ref) v s)) ((of_regval   TLBEntry18_ref) v) else
  if reg_name = (''TLBEntry17'') then map_option ((\<lambda> v . (write_to   TLBEntry17_ref) v s)) ((of_regval   TLBEntry17_ref) v) else
  if reg_name = (''TLBEntry16'') then map_option ((\<lambda> v . (write_to   TLBEntry16_ref) v s)) ((of_regval   TLBEntry16_ref) v) else
  if reg_name = (''TLBEntry15'') then map_option ((\<lambda> v . (write_to   TLBEntry15_ref) v s)) ((of_regval   TLBEntry15_ref) v) else
  if reg_name = (''TLBEntry14'') then map_option ((\<lambda> v . (write_to   TLBEntry14_ref) v s)) ((of_regval   TLBEntry14_ref) v) else
  if reg_name = (''TLBEntry13'') then map_option ((\<lambda> v . (write_to   TLBEntry13_ref) v s)) ((of_regval   TLBEntry13_ref) v) else
  if reg_name = (''TLBEntry12'') then map_option ((\<lambda> v . (write_to   TLBEntry12_ref) v s)) ((of_regval   TLBEntry12_ref) v) else
  if reg_name = (''TLBEntry11'') then map_option ((\<lambda> v . (write_to   TLBEntry11_ref) v s)) ((of_regval   TLBEntry11_ref) v) else
  if reg_name = (''TLBEntry10'') then map_option ((\<lambda> v . (write_to   TLBEntry10_ref) v s)) ((of_regval   TLBEntry10_ref) v) else
  if reg_name = (''TLBEntry09'') then map_option ((\<lambda> v . (write_to   TLBEntry09_ref) v s)) ((of_regval   TLBEntry09_ref) v) else
  if reg_name = (''TLBEntry08'') then map_option ((\<lambda> v . (write_to   TLBEntry08_ref) v s)) ((of_regval   TLBEntry08_ref) v) else
  if reg_name = (''TLBEntry07'') then map_option ((\<lambda> v . (write_to   TLBEntry07_ref) v s)) ((of_regval   TLBEntry07_ref) v) else
  if reg_name = (''TLBEntry06'') then map_option ((\<lambda> v . (write_to   TLBEntry06_ref) v s)) ((of_regval   TLBEntry06_ref) v) else
  if reg_name = (''TLBEntry05'') then map_option ((\<lambda> v . (write_to   TLBEntry05_ref) v s)) ((of_regval   TLBEntry05_ref) v) else
  if reg_name = (''TLBEntry04'') then map_option ((\<lambda> v . (write_to   TLBEntry04_ref) v s)) ((of_regval   TLBEntry04_ref) v) else
  if reg_name = (''TLBEntry03'') then map_option ((\<lambda> v . (write_to   TLBEntry03_ref) v s)) ((of_regval   TLBEntry03_ref) v) else
  if reg_name = (''TLBEntry02'') then map_option ((\<lambda> v . (write_to   TLBEntry02_ref) v s)) ((of_regval   TLBEntry02_ref) v) else
  if reg_name = (''TLBEntry01'') then map_option ((\<lambda> v . (write_to   TLBEntry01_ref) v s)) ((of_regval   TLBEntry01_ref) v) else
  if reg_name = (''TLBEntry00'') then map_option ((\<lambda> v . (write_to   TLBEntry00_ref) v s)) ((of_regval   TLBEntry00_ref) v) else
  if reg_name = (''TLBXContext'') then map_option ((\<lambda> v . (write_to   TLBXContext_ref) v s)) ((of_regval   TLBXContext_ref) v) else
  if reg_name = (''TLBEntryHi'') then map_option ((\<lambda> v . (write_to   TLBEntryHi_ref) v s)) ((of_regval   TLBEntryHi_ref) v) else
  if reg_name = (''TLBWired'') then map_option ((\<lambda> v . (write_to   TLBWired_ref) v s)) ((of_regval   TLBWired_ref) v) else
  if reg_name = (''TLBPageMask'') then map_option ((\<lambda> v . (write_to   TLBPageMask_ref) v s)) ((of_regval   TLBPageMask_ref) v) else
  if reg_name = (''TLBContext'') then map_option ((\<lambda> v . (write_to   TLBContext_ref) v s)) ((of_regval   TLBContext_ref) v) else
  if reg_name = (''TLBEntryLo1'') then map_option ((\<lambda> v . (write_to   TLBEntryLo1_ref) v s)) ((of_regval   TLBEntryLo1_ref) v) else
  if reg_name = (''TLBEntryLo0'') then map_option ((\<lambda> v . (write_to   TLBEntryLo0_ref) v s)) ((of_regval   TLBEntryLo0_ref) v) else
  if reg_name = (''TLBRandom'') then map_option ((\<lambda> v . (write_to   TLBRandom_ref) v s)) ((of_regval   TLBRandom_ref) v) else
  if reg_name = (''TLBIndex'') then map_option ((\<lambda> v . (write_to   TLBIndex_ref) v s)) ((of_regval   TLBIndex_ref) v) else
  if reg_name = (''TLBProbe'') then map_option ((\<lambda> v . (write_to   TLBProbe_ref) v s)) ((of_regval   TLBProbe_ref) v) else
  if reg_name = (''NextPC'') then map_option ((\<lambda> v . (write_to   NextPC_ref) v s)) ((of_regval   NextPC_ref) v) else
  if reg_name = (''PC'') then map_option ((\<lambda> v . (write_to   PC_ref) v s)) ((of_regval   PC_ref) v) else
  None )\<close> 
  for  reg_name  :: " string " 
  and  v  :: " register_value " 
  and  s  :: " regstate "


definition register_accessors  :: \<open>(string \<Rightarrow> regstate \<Rightarrow>(register_value)option)*(string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option)\<close>  where 
     \<open> register_accessors = ( (get_regval, set_regval))\<close>



type_synonym( 'a, 'r) MR =" (register_value, regstate, 'a, 'r, exception) base_monadR "
type_synonym 'a M =" (register_value, regstate, 'a, exception) base_monad "
end
