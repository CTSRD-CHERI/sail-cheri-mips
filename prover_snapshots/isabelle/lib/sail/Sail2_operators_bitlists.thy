chapter \<open>Generated by Lem from \<open>../../src/gen_lib/sail2_operators_bitlists.lem\<close>.\<close>

theory "Sail2_operators_bitlists" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "LEM.Lem_machine_word"
  "Sail2_values"
  "Sail2_operators"
  "Sail2_prompt_monad"
  "Sail2_prompt"

begin 

\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Machine_word\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_operators\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt_monad\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt\<close>\<close>

\<comment> \<open>\<open> Specialisation of operators to bit lists \<close>\<close>

\<comment> \<open>\<open>val uint_maybe : list bitU -> maybe integer\<close>\<close>
definition uint_maybe  :: \<open>(bitU)list \<Rightarrow>(int)option \<close>  where 
     \<open> uint_maybe v = ( unsigned_of_bits (List.map ((\<lambda> b. b)) v))\<close> 
  for  v  :: "(bitU)list "

definition uint_fail  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow>('c,(int),'b)monad \<close>  where 
     \<open> uint_fail dict_Sail2_values_Bitvector_a v = ( maybe_fail (''uint'') (
  (unsigned_method   dict_Sail2_values_Bitvector_a) v))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  v  :: " 'a "

definition uint_nondet  :: \<open>(bitU)list \<Rightarrow>('b,(int),'a)monad \<close>  where 
     \<open> uint_nondet v = (
  bools_of_bits_nondet v \<bind> ((\<lambda> bs . 
  return (int_of_bools False bs))))\<close> 
  for  v  :: "(bitU)list "

definition uint  :: \<open>(bitU)list \<Rightarrow> int \<close>  where 
     \<open> uint v = ( maybe_failwith (uint_maybe v))\<close> 
  for  v  :: "(bitU)list "


\<comment> \<open>\<open>val sint_maybe : list bitU -> maybe integer\<close>\<close>
definition sint_maybe  :: \<open>(bitU)list \<Rightarrow>(int)option \<close>  where 
     \<open> sint_maybe v = ( signed_of_bits (List.map ((\<lambda> b. b)) v))\<close> 
  for  v  :: "(bitU)list "

definition sint_fail  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow>('c,(int),'b)monad \<close>  where 
     \<open> sint_fail dict_Sail2_values_Bitvector_a v = ( maybe_fail (''sint'') (
  (signed_method   dict_Sail2_values_Bitvector_a) v))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  v  :: " 'a "

definition sint_nondet  :: \<open>(bitU)list \<Rightarrow>('b,(int),'a)monad \<close>  where 
     \<open> sint_nondet v = (
  bools_of_bits_nondet v \<bind> ((\<lambda> bs . 
  return (int_of_bools True bs))))\<close> 
  for  v  :: "(bitU)list "

definition sint  :: \<open>(bitU)list \<Rightarrow> int \<close>  where 
     \<open> sint v = ( maybe_failwith (sint_maybe v))\<close> 
  for  v  :: "(bitU)list "


\<comment> \<open>\<open>val extz_vec : integer -> list bitU -> list bitU\<close>\<close>
definition extz_vec  :: \<open> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> extz_vec = ( 
  extz_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val exts_vec : integer -> list bitU -> list bitU\<close>\<close>
definition exts_vec  :: \<open> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> exts_vec = ( 
  exts_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val zero_extend : list bitU -> integer -> list bitU\<close>\<close>
definition zero_extend  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> zero_extend bits len = ( extz_bits len bits )\<close> 
  for  bits  :: "(bitU)list " 
  and  len  :: " int "


\<comment> \<open>\<open>val sign_extend : list bitU -> integer -> list bitU\<close>\<close>
definition sign_extend  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> sign_extend bits len = ( exts_bits len bits )\<close> 
  for  bits  :: "(bitU)list " 
  and  len  :: " int "


\<comment> \<open>\<open>val zeros : integer -> list bitU\<close>\<close>
definition zeros  :: \<open> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> zeros len = ( repeat [B0] len )\<close> 
  for  len  :: " int "


\<comment> \<open>\<open>val ones : integer -> list bitU\<close>\<close>
definition ones  :: \<open> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> ones len = ( repeat [B1] len )\<close> 
  for  len  :: " int "


\<comment> \<open>\<open>val vector_truncate : list bitU -> integer -> list bitU\<close>\<close>
definition vector_truncate  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> vector_truncate bs len = ( extz_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) len bs )\<close> 
  for  bs  :: "(bitU)list " 
  and  len  :: " int "


\<comment> \<open>\<open>val vector_truncateLSB : list bitU -> integer -> list bitU\<close>\<close>
definition vector_truncateLSB  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> vector_truncateLSB bs len = ( take_list len bs )\<close> 
  for  bs  :: "(bitU)list " 
  and  len  :: " int "


\<comment> \<open>\<open>val vec_of_bits_maybe    : list bitU -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val vec_of_bits_fail     : forall 'rv 'e. list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val vec_of_bits_nondet   : forall 'rv 'e. list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val vec_of_bits_failwith : list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val vec_of_bits          : list bitU -> list bitU\<close>\<close>

\<comment> \<open>\<open>val access_vec_inc : list bitU -> integer -> bitU\<close>\<close>
definition access_vec_inc  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<close>  where 
     \<open> access_vec_inc = ( 
  access_bv_inc
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val access_vec_dec : list bitU -> integer -> bitU\<close>\<close>
definition access_vec_dec  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<close>  where 
     \<open> access_vec_dec = ( 
  access_bv_dec
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val update_vec_inc : list bitU -> integer -> bitU -> list bitU\<close>\<close>
definition update_vec_inc  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>(bitU)list \<close>  where 
     \<open> update_vec_inc = ( 
  update_bv_inc
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition update_vec_inc_maybe  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> update_vec_inc_maybe v i b = ( Some (update_vec_inc v i b))\<close> 
  for  v  :: "(bitU)list " 
  and  i  :: " int " 
  and  b  :: " bitU "

definition update_vec_inc_fail  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> update_vec_inc_fail v i b = ( return (update_vec_inc v i b))\<close> 
  for  v  :: "(bitU)list " 
  and  i  :: " int " 
  and  b  :: " bitU "

definition update_vec_inc_nondet  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> update_vec_inc_nondet v i b = ( return (update_vec_inc v i b))\<close> 
  for  v  :: "(bitU)list " 
  and  i  :: " int " 
  and  b  :: " bitU "


\<comment> \<open>\<open>val update_vec_dec : list bitU -> integer -> bitU -> list bitU\<close>\<close>
definition update_vec_dec  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>(bitU)list \<close>  where 
     \<open> update_vec_dec = ( 
  update_bv_dec
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition update_vec_dec_maybe  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> update_vec_dec_maybe v i b = ( Some (update_vec_dec v i b))\<close> 
  for  v  :: "(bitU)list " 
  and  i  :: " int " 
  and  b  :: " bitU "

definition update_vec_dec_fail  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> update_vec_dec_fail v i b = ( return (update_vec_dec v i b))\<close> 
  for  v  :: "(bitU)list " 
  and  i  :: " int " 
  and  b  :: " bitU "

definition update_vec_dec_nondet  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> update_vec_dec_nondet v i b = ( return (update_vec_dec v i b))\<close> 
  for  v  :: "(bitU)list " 
  and  i  :: " int " 
  and  b  :: " bitU "


\<comment> \<open>\<open>val subrange_vec_inc : list bitU -> integer -> integer -> list bitU\<close>\<close>
definition subrange_vec_inc  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> subrange_vec_inc = ( 
  subrange_bv_inc
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val subrange_vec_dec : list bitU -> integer -> integer -> list bitU\<close>\<close>
definition subrange_vec_dec  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> subrange_vec_dec = ( 
  subrange_bv_dec
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val update_subrange_vec_inc : list bitU -> integer -> integer -> list bitU -> list bitU\<close>\<close>
definition update_subrange_vec_inc  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> update_subrange_vec_inc = ( 
  update_subrange_bv_inc
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict)
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val update_subrange_vec_dec : list bitU -> integer -> integer -> list bitU -> list bitU\<close>\<close>
definition update_subrange_vec_dec  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> update_subrange_vec_dec = ( 
  update_subrange_bv_dec
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict)
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val concat_vec : list bitU -> list bitU -> list bitU\<close>\<close>
definition concat_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> concat_vec = ( 
  concat_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict)
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val cons_vec : bitU -> list bitU -> list bitU\<close>\<close>
definition cons_vec  :: \<open> bitU \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> cons_vec = ( 
  cons_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition cons_vec_maybe  :: \<open> bitU \<Rightarrow>(bitU)list \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> cons_vec_maybe b v = ( Some (cons_vec b v))\<close> 
  for  b  :: " bitU " 
  and  v  :: "(bitU)list "

definition cons_vec_fail  :: \<open> bitU \<Rightarrow>(bitU)list \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> cons_vec_fail b v = ( return (cons_vec b v))\<close> 
  for  b  :: " bitU " 
  and  v  :: "(bitU)list "

definition cons_vec_nondet  :: \<open> bitU \<Rightarrow>(bitU)list \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> cons_vec_nondet b v = ( return (cons_vec b v))\<close> 
  for  b  :: " bitU " 
  and  v  :: "(bitU)list "


\<comment> \<open>\<open>val cast_unit_vec : bitU -> list bitU\<close>\<close>
definition cast_unit_vec  :: \<open> bitU \<Rightarrow>(bitU)list \<close>  where 
     \<open> cast_unit_vec = ( cast_unit_bv )\<close>

definition cast_unit_vec_maybe  :: \<open> bitU \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> cast_unit_vec_maybe b = ( Some (cast_unit_vec b))\<close> 
  for  b  :: " bitU "

definition cast_unit_vec_fail  :: \<open> bitU \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> cast_unit_vec_fail b = ( return (cast_unit_vec b))\<close> 
  for  b  :: " bitU "

definition cast_unit_vec_nondet  :: \<open> bitU \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> cast_unit_vec_nondet b = ( return (cast_unit_vec b))\<close> 
  for  b  :: " bitU "


\<comment> \<open>\<open>val vec_of_bit : integer -> bitU -> list bitU\<close>\<close>
definition vec_of_bit  :: \<open> int \<Rightarrow> bitU \<Rightarrow>(bitU)list \<close>  where 
     \<open> vec_of_bit = ( bv_of_bit )\<close>

definition vec_of_bit_maybe  :: \<open> int \<Rightarrow> bitU \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> vec_of_bit_maybe len b = ( Some (vec_of_bit len b))\<close> 
  for  len  :: " int " 
  and  b  :: " bitU "

definition vec_of_bit_fail  :: \<open> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> vec_of_bit_fail len b = ( return (vec_of_bit len b))\<close> 
  for  len  :: " int " 
  and  b  :: " bitU "

definition vec_of_bit_nondet  :: \<open> int \<Rightarrow> bitU \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> vec_of_bit_nondet len b = ( return (vec_of_bit len b))\<close> 
  for  len  :: " int " 
  and  b  :: " bitU "


\<comment> \<open>\<open>val msb : list bitU -> bitU\<close>\<close>
definition msb  :: \<open>(bitU)list \<Rightarrow> bitU \<close>  where 
     \<open> msb = ( 
  most_significant
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val int_of_vec_maybe : bool -> list bitU -> maybe integer\<close>\<close>
definition int_of_vec_maybe  :: \<open> bool \<Rightarrow>(bitU)list \<Rightarrow>(int)option \<close>  where 
     \<open> int_of_vec_maybe = ( 
  int_of_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition int_of_vec_fail  :: \<open> bool \<Rightarrow>(bitU)list \<Rightarrow>('b,(int),'a)monad \<close>  where 
     \<open> int_of_vec_fail sign v = ( maybe_fail (''int_of_vec'') (int_of_vec_maybe sign v))\<close> 
  for  sign  :: " bool " 
  and  v  :: "(bitU)list "

definition int_of_vec_nondet  :: \<open> bool \<Rightarrow>(bitU)list \<Rightarrow>('b,(int),'a)monad \<close>  where 
     \<open> int_of_vec_nondet sign v = ( bools_of_bits_nondet v \<bind> ((\<lambda> v .  return (int_of_bools sign v))))\<close> 
  for  sign  :: " bool " 
  and  v  :: "(bitU)list "

definition int_of_vec  :: \<open> bool \<Rightarrow>(bitU)list \<Rightarrow> int \<close>  where 
     \<open> int_of_vec sign v = ( maybe_failwith (int_of_vec_maybe sign v))\<close> 
  for  sign  :: " bool " 
  and  v  :: "(bitU)list "


\<comment> \<open>\<open>val string_of_bits : list bitU -> string\<close>\<close>
definition string_of_bits  :: \<open>(bitU)list \<Rightarrow> string \<close>  where 
     \<open> string_of_bits = ( 
  string_of_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val decimal_string_of_bits : list bitU -> string\<close>\<close>
definition decimal_string_of_bits  :: \<open>(bitU)list \<Rightarrow> string \<close>  where 
     \<open> decimal_string_of_bits = ( 
  decimal_string_of_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val and_vec : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val or_vec  : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val xor_vec : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val not_vec : list bitU -> list bitU\<close>\<close>
definition and_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> and_vec = ( binop_list and_bit )\<close>

definition or_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>   where 
     \<open> or_vec  = ( binop_list or_bit )\<close>

definition xor_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> xor_vec = ( binop_list xor_bit )\<close>

definition not_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> not_vec = ( List.map not_bit )\<close>


\<comment> \<open>\<open>val arith_op_double_bl : forall 'a 'b. Bitvector 'a =>
  (integer -> integer -> integer) -> bool -> 'a -> 'a -> list bitU\<close>\<close>
definition arith_op_double_bl  :: \<open> 'a Bitvector_class \<Rightarrow>(int \<Rightarrow> int \<Rightarrow> int)\<Rightarrow> bool \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow>(bitU)list \<close>  where 
     \<open> arith_op_double_bl dict_Sail2_values_Bitvector_a op1 sign l r = (
  (let len =(( 2 :: int) *
  (length_method   dict_Sail2_values_Bitvector_a) l) in
  (let l' = (if sign then exts_bv 
  dict_Sail2_values_Bitvector_a len l else extz_bv dict_Sail2_values_Bitvector_a len l) in
  (let r' = (if sign then exts_bv 
  dict_Sail2_values_Bitvector_a len r else extz_bv dict_Sail2_values_Bitvector_a len r) in
  List.map ((\<lambda> b. b)) (arith_op_bits op1 sign (List.map ((\<lambda> b. b)) l') (List.map ((\<lambda> b. b)) r'))))))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  op1  :: " int \<Rightarrow> int \<Rightarrow> int " 
  and  sign  :: " bool " 
  and  l  :: " 'a " 
  and  r  :: " 'a "


\<comment> \<open>\<open>val add_vec   : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val adds_vec  : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val sub_vec   : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val subs_vec  : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mult_vec  : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mults_vec : list bitU -> list bitU -> list bitU\<close>\<close>
definition add_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>    where 
     \<open> add_vec   = ( ((\<lambda> l r. List.map ((\<lambda> b. b)) (arith_op_bits (+) False (List.map ((\<lambda> b. b)) l) (List.map ((\<lambda> b. b)) r)))))\<close>

definition adds_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>   where 
     \<open> adds_vec  = ( ((\<lambda> l r. List.map ((\<lambda> b. b)) (arith_op_bits (+) True (List.map ((\<lambda> b. b)) l) (List.map ((\<lambda> b. b)) r)))))\<close>

definition sub_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>    where 
     \<open> sub_vec   = ( ((\<lambda> l r. List.map ((\<lambda> b. b)) (arith_op_bits (-) False (List.map ((\<lambda> b. b)) l) (List.map ((\<lambda> b. b)) r)))))\<close>

definition subs_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>   where 
     \<open> subs_vec  = ( ((\<lambda> l r. List.map ((\<lambda> b. b)) (arith_op_bits (-) True (List.map ((\<lambda> b. b)) l) (List.map ((\<lambda> b. b)) r)))))\<close>

definition mult_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>   where 
     \<open> mult_vec  = ( arith_op_double_bl 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (*) False )\<close>

definition mults_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> mults_vec = ( arith_op_double_bl 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (*) True )\<close>


\<comment> \<open>\<open>val add_vec_int       : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val sub_vec_int       : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mult_vec_int      : list bitU -> integer -> list bitU\<close>\<close>
definition add_vec_int  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> add_vec_int   l r = ( arith_op_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (+) False l r )\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "

definition sub_vec_int  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> sub_vec_int   l r = ( arith_op_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (-) False l r )\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "

definition mult_vec_int  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> mult_vec_int  l r = ( arith_op_double_bl 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (*) False l (List.map ((\<lambda> b. b)) (bits_of_int (int (List.length l)) r)))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "


\<comment> \<open>\<open>val add_int_vec       : integer -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val sub_int_vec       : integer -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mult_int_vec      : integer -> list bitU -> list bitU\<close>\<close>
definition add_int_vec  :: \<open> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> add_int_vec   l r = ( arith_op_int_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (+) False l r )\<close> 
  for  l  :: " int " 
  and  r  :: "(bitU)list "

definition sub_int_vec  :: \<open> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> sub_int_vec   l r = ( arith_op_int_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (-) False l r )\<close> 
  for  l  :: " int " 
  and  r  :: "(bitU)list "

definition mult_int_vec  :: \<open> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> mult_int_vec  l r = ( arith_op_double_bl 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (*) False (List.map ((\<lambda> b. b)) (bits_of_int (int (List.length r)) l)) r )\<close> 
  for  l  :: " int " 
  and  r  :: "(bitU)list "


\<comment> \<open>\<open>val add_vec_bit      : list bitU -> bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val adds_vec_bit     : list bitU -> bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val sub_vec_bit      : list bitU -> bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val subs_vec_bit     : list bitU -> bitU -> list bitU\<close>\<close>

definition add_vec_bool  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> 'a \<close>  where 
     \<open> add_vec_bool dict_Sail2_values_Bitvector_a       l r = ( arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a (+) False l r )\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bool "

definition add_vec_bit_maybe  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow> 'a option \<close>  where 
     \<open> add_vec_bit_maybe dict_Sail2_values_Bitvector_a  l r = ( arith_op_bv_bit 
  dict_Sail2_values_Bitvector_a (+) False l r )\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition add_vec_bit_fail  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad \<close>  where 
     \<open> add_vec_bit_fail dict_Sail2_values_Bitvector_a   l r = ( maybe_fail (''add_vec_bit'') (add_vec_bit_maybe 
  dict_Sail2_values_Bitvector_a l r))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition add_vec_bit_nondet  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad \<close>  where 
     \<open> add_vec_bit_nondet dict_Sail2_values_Bitvector_a l r = ( bool_of_bitU_nondet r \<bind> ((\<lambda> r .  return (add_vec_bool 
  dict_Sail2_values_Bitvector_a l r))))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition add_vec_bit  :: \<open>(bitU)list \<Rightarrow> bitU \<Rightarrow>(bitU)list \<close>  where 
     \<open> add_vec_bit        l r = ( case_option (repeat [BU] (int (List.length l))) id (add_vec_bit_maybe 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " bitU "


definition adds_vec_bool  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> 'a \<close>  where 
     \<open> adds_vec_bool dict_Sail2_values_Bitvector_a       l r = ( arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a (+) True l r )\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bool "

definition adds_vec_bit_maybe  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow> 'a option \<close>  where 
     \<open> adds_vec_bit_maybe dict_Sail2_values_Bitvector_a  l r = ( arith_op_bv_bit 
  dict_Sail2_values_Bitvector_a (+) True l r )\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition adds_vec_bit_fail  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad \<close>  where 
     \<open> adds_vec_bit_fail dict_Sail2_values_Bitvector_a   l r = ( maybe_fail (''adds_vec_bit'') (adds_vec_bit_maybe 
  dict_Sail2_values_Bitvector_a l r))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition adds_vec_bit_nondet  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad \<close>  where 
     \<open> adds_vec_bit_nondet dict_Sail2_values_Bitvector_a l r = ( bool_of_bitU_nondet r \<bind> ((\<lambda> r .  return (adds_vec_bool 
  dict_Sail2_values_Bitvector_a l r))))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition adds_vec_bit  :: \<open>(bitU)list \<Rightarrow> bitU \<Rightarrow>(bitU)list \<close>  where 
     \<open> adds_vec_bit        l r = ( case_option (repeat [BU] (int (List.length l))) id (adds_vec_bit_maybe 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " bitU "


definition sub_vec_bool  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> 'a \<close>  where 
     \<open> sub_vec_bool dict_Sail2_values_Bitvector_a        l r = ( arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a (-) False l r )\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bool "

definition sub_vec_bit_maybe  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow> 'a option \<close>  where 
     \<open> sub_vec_bit_maybe dict_Sail2_values_Bitvector_a   l r = ( arith_op_bv_bit 
  dict_Sail2_values_Bitvector_a (-) False l r )\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition sub_vec_bit_fail  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad \<close>  where 
     \<open> sub_vec_bit_fail dict_Sail2_values_Bitvector_a    l r = ( maybe_fail (''sub_vec_bit'') (sub_vec_bit_maybe 
  dict_Sail2_values_Bitvector_a l r))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition sub_vec_bit_nondet  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad \<close>  where 
     \<open> sub_vec_bit_nondet dict_Sail2_values_Bitvector_a  l r = ( bool_of_bitU_nondet r \<bind> ((\<lambda> r .  return (sub_vec_bool 
  dict_Sail2_values_Bitvector_a l r))))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition sub_vec_bit  :: \<open>(bitU)list \<Rightarrow> bitU \<Rightarrow>(bitU)list \<close>  where 
     \<open> sub_vec_bit         l r = ( case_option (repeat [BU] (int (List.length l))) id (sub_vec_bit_maybe 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " bitU "


definition subs_vec_bool  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bool \<Rightarrow> 'a \<close>  where 
     \<open> subs_vec_bool dict_Sail2_values_Bitvector_a       l r = ( arith_op_bv_bool 
  dict_Sail2_values_Bitvector_a (-) True l r )\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bool "

definition subs_vec_bit_maybe  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow> 'a option \<close>  where 
     \<open> subs_vec_bit_maybe dict_Sail2_values_Bitvector_a  l r = ( arith_op_bv_bit 
  dict_Sail2_values_Bitvector_a (-) True l r )\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition subs_vec_bit_fail  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad \<close>  where 
     \<open> subs_vec_bit_fail dict_Sail2_values_Bitvector_a   l r = ( maybe_fail (''sub_vec_bit'') (subs_vec_bit_maybe 
  dict_Sail2_values_Bitvector_a l r))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition subs_vec_bit_nondet  :: \<open> 'a Bitvector_class \<Rightarrow> 'a \<Rightarrow> bitU \<Rightarrow>('d,'a,'c)monad \<close>  where 
     \<open> subs_vec_bit_nondet dict_Sail2_values_Bitvector_a l r = ( bool_of_bitU_nondet r \<bind> ((\<lambda> r .  return (subs_vec_bool 
  dict_Sail2_values_Bitvector_a l r))))\<close> 
  for  dict_Sail2_values_Bitvector_a  :: " 'a Bitvector_class " 
  and  l  :: " 'a " 
  and  r  :: " bitU "

definition subs_vec_bit  :: \<open>(bitU)list \<Rightarrow> bitU \<Rightarrow>(bitU)list \<close>  where 
     \<open> subs_vec_bit        l r = ( case_option (repeat [BU] (int (List.length l))) id (subs_vec_bit_maybe 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " bitU "


\<comment> \<open>\<open>val add_overflow_vec         : list bitU -> list bitU -> (list bitU * bitU * bitU)
val add_overflow_vec_signed  : list bitU -> list bitU -> (list bitU * bitU * bitU)
val sub_overflow_vec         : list bitU -> list bitU -> (list bitU * bitU * bitU)
val sub_overflow_vec_signed  : list bitU -> list bitU -> (list bitU * bitU * bitU)
val mult_overflow_vec        : list bitU -> list bitU -> (list bitU * bitU * bitU)
val mult_overflow_vec_signed : list bitU -> list bitU -> (list bitU * bitU * bitU)
let add_overflow_vec         = add_overflow_bv
let add_overflow_vec_signed  = add_overflow_bv_signed
let sub_overflow_vec         = sub_overflow_bv
let sub_overflow_vec_signed  = sub_overflow_bv_signed
let mult_overflow_vec        = mult_overflow_bv
let mult_overflow_vec_signed = mult_overflow_bv_signed

val add_overflow_vec_bit         : list bitU -> bitU -> (list bitU * bitU * bitU)
val add_overflow_vec_bit_signed  : list bitU -> bitU -> (list bitU * bitU * bitU)
val sub_overflow_vec_bit         : list bitU -> bitU -> (list bitU * bitU * bitU)
val sub_overflow_vec_bit_signed  : list bitU -> bitU -> (list bitU * bitU * bitU)
let add_overflow_vec_bit         = add_overflow_bv_bit
let add_overflow_vec_bit_signed  = add_overflow_bv_bit_signed
let sub_overflow_vec_bit         = sub_overflow_bv_bit
let sub_overflow_vec_bit_signed  = sub_overflow_bv_bit_signed\<close>\<close>

\<comment> \<open>\<open>val shiftl       : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val shiftr       : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val arith_shiftr : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val rotl         : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val rotr         : list bitU -> integer -> list bitU\<close>\<close>
definition shiftl  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>        where 
     \<open> shiftl       = ( 
  shiftl_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition shiftr  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>        where 
     \<open> shiftr       = ( 
  shiftr_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition arith_shiftr  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> arith_shiftr = ( 
  arith_shiftr_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition rotl  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>          where 
     \<open> rotl         = ( 
  rotl_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition rotr  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>          where 
     \<open> rotr         = ( 
  rotr_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val mod_vec        : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mod_vec_maybe  : list bitU -> list bitU -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val mod_vec_fail   : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val mod_vec_nondet : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
definition mod_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> mod_vec        l r = ( case_option (repeat [BU] (int (List.length l))) id (mod_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition mod_vec_maybe  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> mod_vec_maybe  l r = ( mod_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition mod_vec_fail  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> mod_vec_fail   l r = ( maybe_fail (''mod_vec'') (mod_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition mod_vec_nondet  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> mod_vec_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (mod_vec l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "


\<comment> \<open>\<open>val quot_vec        : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val quot_vec_maybe  : list bitU -> list bitU -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val quot_vec_fail   : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val quot_vec_nondet : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
definition quot_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> quot_vec        l r = ( case_option (repeat [BU] (int (List.length l))) id (quot_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition quot_vec_maybe  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> quot_vec_maybe  l r = ( quot_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition quot_vec_fail  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> quot_vec_fail   l r = ( maybe_fail (''quot_vec'') (quot_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition quot_vec_nondet  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> quot_vec_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (quot_vec l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "


\<comment> \<open>\<open>val quots_vec        : list bitU -> list bitU -> list bitU\<close>\<close>
\<comment> \<open>\<open>val quots_vec_maybe  : list bitU -> list bitU -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val quots_vec_fail   : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val quots_vec_nondet : forall 'rv 'e. list bitU -> list bitU -> monad 'rv (list bitU) 'e\<close>\<close>
definition quots_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> quots_vec        l r = ( case_option (repeat [BU] (int (List.length l))) id (quots_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition quots_vec_maybe  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> quots_vec_maybe  l r = ( quots_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition quots_vec_fail  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> quots_vec_fail   l r = ( maybe_fail (''quots_vec'') (quots_bv 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "

definition quots_vec_nondet  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> quots_vec_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (quots_vec l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: "(bitU)list "


\<comment> \<open>\<open>val mod_vec_int        : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val mod_vec_int_maybe  : list bitU -> integer -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val mod_vec_int_fail   : forall 'rv 'e. list bitU -> integer -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val mod_vec_int_nondet : forall 'rv 'e. list bitU -> integer -> monad 'rv (list bitU) 'e\<close>\<close>
definition mod_vec_int  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> mod_vec_int        l r = ( case_option (repeat [BU] (int (List.length l))) id (mod_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "

definition mod_vec_int_maybe  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> mod_vec_int_maybe  l r = ( mod_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "

definition mod_vec_int_fail  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> mod_vec_int_fail   l r = ( maybe_fail (''mod_vec_int'') (mod_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "

definition mod_vec_int_nondet  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> mod_vec_int_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (mod_vec_int l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "


\<comment> \<open>\<open>val quot_vec_int        : list bitU -> integer -> list bitU\<close>\<close>
\<comment> \<open>\<open>val quot_vec_int_maybe  : list bitU -> integer -> maybe (list bitU)\<close>\<close>
\<comment> \<open>\<open>val quot_vec_int_fail   : forall 'rv 'e. list bitU -> integer -> monad 'rv (list bitU) 'e\<close>\<close>
\<comment> \<open>\<open>val quot_vec_int_nondet : forall 'rv 'e. list bitU -> integer -> monad 'rv (list bitU) 'e\<close>\<close>
definition quot_vec_int  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> quot_vec_int        l r = ( case_option (repeat [BU] (int (List.length l))) id (quot_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "

definition quot_vec_int_maybe  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> quot_vec_int_maybe  l r = ( quot_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r )\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "

definition quot_vec_int_fail  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> quot_vec_int_fail   l r = ( maybe_fail (''quot_vec_int'') (quot_bv_int 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (instance_Sail2_values_Bitvector_list_dict
   instance_Sail2_values_BitU_Sail2_values_bitU_dict) l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "

definition quot_vec_int_nondet  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>('rv,((bitU)list),'e)monad \<close>  where 
     \<open> quot_vec_int_nondet l r = ( of_bits_nondet 
  (instance_Sail2_values_Bitvector_list_dict
     instance_Sail2_values_BitU_Sail2_values_bitU_dict) (quot_vec_int l r))\<close> 
  for  l  :: "(bitU)list " 
  and  r  :: " int "


\<comment> \<open>\<open>val replicate_bits : list bitU -> integer -> list bitU\<close>\<close>
definition replicate_bits  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> replicate_bits = ( 
  replicate_bits_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val duplicate : bitU -> integer -> list bitU\<close>\<close>
definition duplicate  :: \<open> bitU \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> duplicate = ( 
  duplicate_bit_bv instance_Sail2_values_BitU_Sail2_values_bitU_dict )\<close>

definition duplicate_maybe  :: \<open> bitU \<Rightarrow> int \<Rightarrow>((bitU)list)option \<close>  where 
     \<open> duplicate_maybe b n = ( Some (duplicate b n))\<close> 
  for  b  :: " bitU " 
  and  n  :: " int "

definition duplicate_fail  :: \<open> bitU \<Rightarrow> int \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> duplicate_fail b n = ( return (duplicate b n))\<close> 
  for  b  :: " bitU " 
  and  n  :: " int "

definition duplicate_nondet  :: \<open> bitU \<Rightarrow> int \<Rightarrow>('b,((bitU)list),'a)monad \<close>  where 
     \<open> duplicate_nondet b n = (
  bool_of_bitU_nondet b \<bind> ((\<lambda> b . 
  return (duplicate (bitU_of_bool b) n))))\<close> 
  for  b  :: " bitU " 
  and  n  :: " int "


\<comment> \<open>\<open>val reverse_endianness : list bitU -> list bitU\<close>\<close>
definition reverse_endianness  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> reverse_endianness v = ( reverse_endianness_list v )\<close> 
  for  v  :: "(bitU)list "


\<comment> \<open>\<open>val get_slice_int : integer -> integer -> integer -> list bitU\<close>\<close>
definition get_slice_int  :: \<open> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> get_slice_int = ( 
  get_slice_int_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val set_slice_int : integer -> integer -> integer -> list bitU -> integer\<close>\<close>
definition set_slice_int  :: \<open> int \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow> int \<close>  where 
     \<open> set_slice_int = ( 
  set_slice_int_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>


\<comment> \<open>\<open>val slice : list bitU -> integer -> integer -> list bitU\<close>\<close>
definition slice  :: \<open>(bitU)list \<Rightarrow> int \<Rightarrow> int \<Rightarrow>(bitU)list \<close>  where 
     \<open> slice v lo len = (
  subrange_vec_dec v ((lo + len) -( 1 :: int)) lo )\<close> 
  for  v  :: "(bitU)list " 
  and  lo  :: " int " 
  and  len  :: " int "


\<comment> \<open>\<open>val set_slice : integer -> integer -> list bitU -> integer -> list bitU -> list bitU\<close>\<close>
definition set_slice  :: \<open> int \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow> int \<Rightarrow>(bitU)list \<Rightarrow>(bitU)list \<close>  where 
     \<open> set_slice (out_len::ii) (slice_len::ii) out (n::ii) v = (
  update_subrange_vec_dec out ((n + slice_len) -( 1 :: int)) n v )\<close> 
  for  out_len  :: " int " 
  and  slice_len  :: " int " 
  and  out  :: "(bitU)list " 
  and  n  :: " int " 
  and  v  :: "(bitU)list "


\<comment> \<open>\<open>val eq_vec    : list bitU -> list bitU -> bool\<close>\<close>
\<comment> \<open>\<open>val neq_vec   : list bitU -> list bitU -> bool\<close>\<close>
definition eq_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow> bool \<close>     where 
     \<open> eq_vec    = ( 
  eq_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

definition neq_vec  :: \<open>(bitU)list \<Rightarrow>(bitU)list \<Rightarrow> bool \<close>    where 
     \<open> neq_vec   = ( 
  neq_bv
    (instance_Sail2_values_Bitvector_list_dict
       instance_Sail2_values_BitU_Sail2_values_bitU_dict) )\<close>

end
