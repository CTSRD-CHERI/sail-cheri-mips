chapter \<open>Generated by Lem from \<open>basic_classes.lem\<close>.\<close>

theory "Lem_basic_classes" 

imports
  Main
  "Lem_bool"

begin 

\<comment> \<open>\<open>****************************************************************************\<close>\<close>
\<comment> \<open>\<open> Basic Type Classes                                                         \<close>\<close>
\<comment> \<open>\<open>****************************************************************************\<close>\<close>

\<comment> \<open>\<open>open import Bool\<close>\<close> 

\<comment> \<open>\<open>open import {coq} `Coq.Strings.Ascii`\<close>\<close>
\<comment> \<open>\<open>open import {hol} `ternaryComparisonsTheory`\<close>\<close>

\<comment> \<open>\<open> ========================================================================== \<close>\<close>
\<comment> \<open>\<open> Equality                                                                   \<close>\<close>
\<comment> \<open>\<open> ========================================================================== \<close>\<close>

\<comment> \<open>\<open> Lem`s default equality (=) is defined by the following type-class Eq.
   This typeclass should define equality on an abstract datatype 'a. It should
   always coincide with the default equality of Coq, HOL and Isabelle.
   For OCaml, it might be different, since abstract datatypes like sets
   might have fancy equalities. \<close>\<close>

\<comment> \<open>\<open>class ( Eq 'a ) 
  val = [isEqual] : 'a -> 'a -> bool
  val <> [isInequal] : 'a -> 'a -> bool
end\<close>\<close>


\<comment> \<open>\<open> (=) should for all instances be an equivalence relation 
   The isEquivalence predicate of relations could be used here.
   However, this would lead to a cyclic dependency. \<close>\<close>

\<comment> \<open>\<open> TODO: add later, once lemmata can be assigned to classes 
lemma eq_equiv: ((forall x. (x = x)) &&
                 (forall x y. (x = y) <-> (y = x)) &&
                 (forall x y z. ((x = y) && (y = z)) --> (x = z)))
\<close>\<close>

\<comment> \<open>\<open> Structural equality \<close>\<close>

\<comment> \<open>\<open> Sometimes, it is also handy to be able to use structural equality.
   This equality is mapped to the build-in equality of backends. This equality
   differs significantly for each backend. For example, OCaml can`t check equality
   of function types, whereas HOL can.  When using structural equality, one should 
   know what one is doing. The only guarentee is that is behaves like 
   the native backend equality.

   A lengthy name for structural equality is used to discourage its direct use.
   It also ensures that users realise it is unsafe (e.g. OCaml can`t check two functions
   for equality \<close>\<close>
\<comment> \<open>\<open>val unsafe_structural_equality : forall 'a. 'a -> 'a -> bool\<close>\<close>

\<comment> \<open>\<open>val unsafe_structural_inequality : forall 'a. 'a -> 'a -> bool\<close>\<close>
\<comment> \<open>\<open>let unsafe_structural_inequality x y=  not (unsafe_structural_equality x y)\<close>\<close>


\<comment> \<open>\<open> ========================================================================== \<close>\<close>
\<comment> \<open>\<open> Orderings                                                                  \<close>\<close>
\<comment> \<open>\<open> ========================================================================== \<close>\<close>

\<comment> \<open>\<open> The type-class Ord represents total orders (also called linear orders) \<close>\<close>
datatype ordering = LT | EQ | GT

fun orderingIsLess  :: \<open> ordering \<Rightarrow> bool \<close>        where 
     \<open> orderingIsLess LT       = ( True )\<close>
|\<open> orderingIsLess _       = ( False )\<close>

fun orderingIsGreater  :: \<open> ordering \<Rightarrow> bool \<close>     where 
     \<open> orderingIsGreater GT    = ( True )\<close>
|\<open> orderingIsGreater _    = ( False )\<close>

fun orderingIsEqual  :: \<open> ordering \<Rightarrow> bool \<close>       where 
     \<open> orderingIsEqual EQ      = ( True )\<close>
|\<open> orderingIsEqual _      = ( False )\<close>


definition ordering_cases  :: \<open> ordering \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> 'a \<close>  where 
     \<open> ordering_cases r lt eq gt = (
  if orderingIsLess r then lt else
  if orderingIsEqual r then eq else gt )\<close> 
  for  r  :: " ordering " 
  and  lt  :: " 'a " 
  and  eq  :: " 'a " 
  and  gt  :: " 'a "



\<comment> \<open>\<open>val orderingEqual : ordering -> ordering -> bool\<close>\<close>

record 'a Ord_class= 
 
  compare_method                 ::" 'a \<Rightarrow> 'a \<Rightarrow> ordering " 

  isLess_method         ::" 'a \<Rightarrow> 'a \<Rightarrow> bool " 

  isLessEqual_method    ::" 'a \<Rightarrow> 'a \<Rightarrow> bool " 

  isGreater_method      ::" 'a \<Rightarrow> 'a \<Rightarrow> bool " 

  isGreaterEqual_method ::" 'a \<Rightarrow> 'a \<Rightarrow> bool " 




\<comment> \<open>\<open> Ocaml provides default, polymorphic compare functions. Let's use them
   as the default. However, because used perhaps in a typeclass they must be 
   defined for all targets. So, explicitly declare them as undefined for
   all other targets. If explictly declare undefined, the type-checker won't complain and
   an error will only be raised when trying to actually output the function for a certain
   target. \<close>\<close>
\<comment> \<open>\<open>val defaultCompare   : forall 'a. 'a -> 'a -> ordering\<close>\<close>
\<comment> \<open>\<open>val defaultLess      : forall 'a. 'a -> 'a -> bool\<close>\<close>
\<comment> \<open>\<open>val defaultLessEq    : forall 'a. 'a -> 'a -> bool\<close>\<close>
\<comment> \<open>\<open>val defaultGreater   : forall 'a. 'a -> 'a -> bool\<close>\<close>
\<comment> \<open>\<open>val defaultGreaterEq : forall 'a. 'a -> 'a -> bool\<close>\<close> 


definition genericCompare  :: \<open>('a \<Rightarrow> 'a \<Rightarrow> bool)\<Rightarrow>('a \<Rightarrow> 'a \<Rightarrow> bool)\<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> ordering \<close>  where 
     \<open> genericCompare (less1:: 'a \<Rightarrow> 'a \<Rightarrow> bool) (equal:: 'a \<Rightarrow> 'a \<Rightarrow> bool) (x :: 'a) (y :: 'a) = (
  if less1 x y then
    LT
  else if equal x y then
    EQ
  else
    GT )\<close> 
  for  less1  :: " 'a \<Rightarrow> 'a \<Rightarrow> bool " 
  and  equal  :: " 'a \<Rightarrow> 'a \<Rightarrow> bool " 
  and  x  :: " 'a " 
  and  y  :: " 'a "



\<comment> \<open>\<open>
\<open> compare should really be a total order \<close>
lemma ord_OK_1: (
  (forall x y. (compare x y = EQ) <-> (compare y x = EQ)) &&
  (forall x y. (compare x y = LT) <-> (compare y x = GT)))

lemma ord_OK_2: (
  (forall x y z. (x <= y) && (y <= z) --> (x <= z)) &&
  (forall x y. (x <= y) || (y <= x))
)
\<close>\<close>

\<comment> \<open>\<open> let's derive a compare function from the Ord type-class \<close>\<close>
\<comment> \<open>\<open>val ordCompare : forall 'a. Eq 'a, Ord 'a => 'a -> 'a -> ordering\<close>\<close>
definition ordCompare  :: \<open> 'a Ord_class \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> ordering \<close>  where 
     \<open> ordCompare dict_Basic_classes_Ord_a x y = (
  if ((isLess_method   dict_Basic_classes_Ord_a) x y) then LT else
  if (x = y) then EQ else GT )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  x  :: " 'a " 
  and  y  :: " 'a "


record 'a OrdMaxMin_class= 
 
  max_method ::" 'a \<Rightarrow> 'a \<Rightarrow> 'a " 

  min_method ::" 'a \<Rightarrow> 'a \<Rightarrow> 'a "



\<comment> \<open>\<open>val minByLessEqual : forall 'a. ('a -> 'a -> bool) -> 'a -> 'a -> 'a\<close>\<close>

\<comment> \<open>\<open>val maxByLessEqual : forall 'a. ('a -> 'a -> bool) -> 'a -> 'a -> 'a\<close>\<close>

\<comment> \<open>\<open>val defaultMax : forall 'a. Ord 'a => 'a -> 'a -> 'a\<close>\<close>

\<comment> \<open>\<open>val defaultMin : forall 'a. Ord 'a => 'a -> 'a -> 'a\<close>\<close>

definition instance_Basic_classes_OrdMaxMin_var_dict  :: \<open> 'a Ord_class \<Rightarrow> 'a OrdMaxMin_class \<close>  where 
     \<open> instance_Basic_classes_OrdMaxMin_var_dict dict_Basic_classes_Ord_a = ((|

  max_method = (((\<lambda> x y. if (
  (isLessEqual_method   dict_Basic_classes_Ord_a) y x) then x else y))),

  min_method = (((\<lambda> x y. if (
  (isLessEqual_method   dict_Basic_classes_Ord_a) x y) then x else y)))|) )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class "



\<comment> \<open>\<open> ========================================================================== \<close>\<close>
\<comment> \<open>\<open> SetTypes                                                                   \<close>\<close>
\<comment> \<open>\<open> ========================================================================== \<close>\<close>

\<comment> \<open>\<open> Set implementations use often an order on the elements. This allows the OCaml implementation
   to use trees for implementing them. At least, one needs to be able to check equality on sets.
   One could use the Ord type-class for sets. However, defining a special typeclass is cleaner
   and allows more flexibility. One can make e.g. sure, that this type-class is ignored for
   backends like HOL or Isabelle, which don't need it. Moreover, one is not forced to also instantiate
   the functions "<", "<=" ... \<close>\<close>

\<comment> \<open>\<open>class ( SetType 'a ) 
  val {ocaml;coq} setElemCompare : 'a -> 'a -> ordering
end\<close>\<close>

fun boolCompare  :: \<open> bool \<Rightarrow> bool \<Rightarrow> ordering \<close>  where 
     \<open> boolCompare True True = ( EQ )\<close>
|\<open> boolCompare True False = ( GT )\<close>
|\<open> boolCompare False True = ( LT )\<close>
|\<open> boolCompare False False = ( EQ )\<close>


\<comment> \<open>\<open> strings \<close>\<close>

\<comment> \<open>\<open>val charEqual : char -> char -> bool\<close>\<close>

\<comment> \<open>\<open>val stringEquality : string -> string -> bool\<close>\<close>

\<comment> \<open>\<open> pairs \<close>\<close>

\<comment> \<open>\<open>val pairEqual : forall 'a 'b. Eq 'a, Eq 'b => ('a * 'b) -> ('a * 'b) -> bool\<close>\<close>
\<comment> \<open>\<open>let pairEqual (a1, b1) (a2, b2)=  (a1 = a2) && (b1 = b2)\<close>\<close>

\<comment> \<open>\<open>val pairEqualBy : forall 'a 'b. ('a -> 'a -> bool) -> ('b -> 'b -> bool) -> ('a * 'b) -> ('a * 'b) -> bool\<close>\<close>

\<comment> \<open>\<open>val pairCompare : forall 'a 'b. ('a -> 'a -> ordering) -> ('b -> 'b -> ordering) -> ('a * 'b) -> ('a * 'b) -> ordering\<close>\<close>
fun pairCompare  :: \<open>('a \<Rightarrow> 'a \<Rightarrow> ordering)\<Rightarrow>('b \<Rightarrow> 'b \<Rightarrow> ordering)\<Rightarrow> 'a*'b \<Rightarrow> 'a*'b \<Rightarrow> ordering \<close>  where 
     \<open> pairCompare cmpa cmpb (a1, b1) (a2, b2) = (
  (case  cmpa a1 a2 of
      LT => LT
    | GT => GT
    | EQ => cmpb b1 b2
  ))\<close> 
  for  cmpa  :: " 'a \<Rightarrow> 'a \<Rightarrow> ordering " 
  and  cmpb  :: " 'b \<Rightarrow> 'b \<Rightarrow> ordering " 
  and  a1  :: " 'a " 
  and  b1  :: " 'b " 
  and  a2  :: " 'a " 
  and  b2  :: " 'b "


fun pairLess  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'b*'a \<Rightarrow> 'b*'a \<Rightarrow> bool \<close>  where 
     \<open> pairLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b (x1, x2) (y1, y2) = ( (
  (isLess_method   dict_Basic_classes_Ord_b) x1 y1) \<or> (((isLessEqual_method   dict_Basic_classes_Ord_b) x1 y1) \<and> ((isLess_method   dict_Basic_classes_Ord_a) x2 y2)))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  x2  :: " 'a " 
  and  x1  :: " 'b " 
  and  y2  :: " 'a " 
  and  y1  :: " 'b "

fun pairLessEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'b*'a \<Rightarrow> 'b*'a \<Rightarrow> bool \<close>  where 
     \<open> pairLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b (x1, x2) (y1, y2) = ( (
  (isLess_method   dict_Basic_classes_Ord_b) x1 y1) \<or> (((isLessEqual_method   dict_Basic_classes_Ord_b) x1 y1) \<and> ((isLessEqual_method   dict_Basic_classes_Ord_a) x2 y2)))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  x2  :: " 'a " 
  and  x1  :: " 'b " 
  and  y2  :: " 'a " 
  and  y1  :: " 'b "


definition pairGreater  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'a*'b \<Rightarrow> 'a*'b \<Rightarrow> bool \<close>  where 
     \<open> pairGreater dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b x12 y12 = ( pairLess 
  dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y12 x12 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  x12  :: " 'a*'b " 
  and  y12  :: " 'a*'b "

definition pairGreaterEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'a*'b \<Rightarrow> 'a*'b \<Rightarrow> bool \<close>  where 
     \<open> pairGreaterEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b x12 y12 = ( pairLessEq 
  dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y12 x12 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  x12  :: " 'a*'b " 
  and  y12  :: " 'a*'b "


definition instance_Basic_classes_Ord_tup2_dict  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow>('a*'b)Ord_class \<close>  where 
     \<open> instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b = ((|

  compare_method = (pairCompare 
  (compare_method   dict_Basic_classes_Ord_a) (compare_method   dict_Basic_classes_Ord_b)),

  isLess_method = 
  (pairLess dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a),

  isLessEqual_method = 
  (pairLessEq dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a),

  isGreater_method = 
  (pairGreater dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b),

  isGreaterEqual_method = 
  (pairGreaterEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b) |) )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class "



\<comment> \<open>\<open> triples \<close>\<close>

\<comment> \<open>\<open>val tripleEqual : forall 'a 'b 'c. Eq 'a, Eq 'b, Eq 'c => ('a * 'b * 'c) -> ('a * 'b * 'c) -> bool\<close>\<close>
\<comment> \<open>\<open>let tripleEqual (x1, x2, x3) (y1, y2, y3)=  ((Instance_Basic_classes_Eq_tup2.=) (x1, (x2, x3)) (y1, (y2, y3)))\<close>\<close>

\<comment> \<open>\<open>val tripleCompare : forall 'a 'b 'c. ('a -> 'a -> ordering) -> ('b -> 'b -> ordering) -> ('c -> 'c -> ordering) -> ('a * 'b * 'c) -> ('a * 'b * 'c) -> ordering\<close>\<close>
fun tripleCompare  :: \<open>('a \<Rightarrow> 'a \<Rightarrow> ordering)\<Rightarrow>('b \<Rightarrow> 'b \<Rightarrow> ordering)\<Rightarrow>('c \<Rightarrow> 'c \<Rightarrow> ordering)\<Rightarrow> 'a*'b*'c \<Rightarrow> 'a*'b*'c \<Rightarrow> ordering \<close>  where 
     \<open> tripleCompare cmpa cmpb cmpc (a1, b1, c1) (a2, b2, c2) = (
  pairCompare cmpa (pairCompare cmpb cmpc) (a1, (b1, c1)) (a2, (b2, c2)))\<close> 
  for  cmpa  :: " 'a \<Rightarrow> 'a \<Rightarrow> ordering " 
  and  cmpb  :: " 'b \<Rightarrow> 'b \<Rightarrow> ordering " 
  and  cmpc  :: " 'c \<Rightarrow> 'c \<Rightarrow> ordering " 
  and  c1  :: " 'c " 
  and  a1  :: " 'a " 
  and  b1  :: " 'b " 
  and  c2  :: " 'c " 
  and  a2  :: " 'a " 
  and  b2  :: " 'b "


fun tripleLess  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'a*'b*'c \<Rightarrow> 'a*'b*'c \<Rightarrow> bool \<close>  where 
     \<open> tripleLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c (x1, x2, x3) (y1, y2, y3) = ( pairLess 
  (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c) dict_Basic_classes_Ord_a (x1, (x2, x3)) (y1, (y2, y3)))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  x3  :: " 'c " 
  and  x2  :: " 'b " 
  and  x1  :: " 'a " 
  and  y3  :: " 'c " 
  and  y2  :: " 'b " 
  and  y1  :: " 'a "

fun tripleLessEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'a*'b*'c \<Rightarrow> 'a*'b*'c \<Rightarrow> bool \<close>  where 
     \<open> tripleLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c (x1, x2, x3) (y1, y2, y3) = ( pairLessEq 
  (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c) dict_Basic_classes_Ord_a (x1, (x2, x3)) (y1, (y2, y3)))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  x3  :: " 'c " 
  and  x2  :: " 'b " 
  and  x1  :: " 'a " 
  and  y3  :: " 'c " 
  and  y2  :: " 'b " 
  and  y1  :: " 'a "


definition tripleGreater  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'c*'b*'a \<Rightarrow> 'c*'b*'a \<Rightarrow> bool \<close>  where 
     \<open> tripleGreater dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c x123 y123 = ( tripleLess 
  dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y123 x123 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  x123  :: " 'c*'b*'a " 
  and  y123  :: " 'c*'b*'a "

definition tripleGreaterEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'c*'b*'a \<Rightarrow> 'c*'b*'a \<Rightarrow> bool \<close>  where 
     \<open> tripleGreaterEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c x123 y123 = ( tripleLessEq 
  dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y123 x123 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  x123  :: " 'c*'b*'a " 
  and  y123  :: " 'c*'b*'a "


definition instance_Basic_classes_Ord_tup3_dict  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow>('a*'b*'c)Ord_class \<close>  where 
     \<open> instance_Basic_classes_Ord_tup3_dict dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c = ((|

  compare_method = (tripleCompare 
  (compare_method   dict_Basic_classes_Ord_a) (compare_method   dict_Basic_classes_Ord_b) (compare_method   dict_Basic_classes_Ord_c)),

  isLess_method = 
  (tripleLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c),

  isLessEqual_method = 
  (tripleLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c),

  isGreater_method = 
  (tripleGreater dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_a),

  isGreaterEqual_method = 
  (tripleGreaterEq dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_a) |) )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class "


\<comment> \<open>\<open> quadruples \<close>\<close>

\<comment> \<open>\<open>val quadrupleEqual : forall 'a 'b 'c 'd. Eq 'a, Eq 'b, Eq 'c, Eq 'd => ('a * 'b * 'c * 'd) -> ('a * 'b * 'c * 'd) -> bool\<close>\<close>
\<comment> \<open>\<open>let quadrupleEqual (x1, x2, x3, x4) (y1, y2, y3, y4)=  ((Instance_Basic_classes_Eq_tup2.=) (x1, (x2, (x3, x4))) (y1, (y2, (y3, y4))))\<close>\<close>

\<comment> \<open>\<open>val quadrupleCompare : forall 'a 'b 'c 'd. ('a -> 'a -> ordering) -> ('b -> 'b -> ordering) -> ('c -> 'c -> ordering) ->
                                              ('d -> 'd -> ordering) -> ('a * 'b * 'c * 'd) -> ('a * 'b * 'c * 'd) -> ordering\<close>\<close>
fun quadrupleCompare  :: \<open>('a \<Rightarrow> 'a \<Rightarrow> ordering)\<Rightarrow>('b \<Rightarrow> 'b \<Rightarrow> ordering)\<Rightarrow>('c \<Rightarrow> 'c \<Rightarrow> ordering)\<Rightarrow>('d \<Rightarrow> 'd \<Rightarrow> ordering)\<Rightarrow> 'a*'b*'c*'d \<Rightarrow> 'a*'b*'c*'d \<Rightarrow> ordering \<close>  where 
     \<open> quadrupleCompare cmpa cmpb cmpc cmpd (a1, b1, c1, d1) (a2, b2, c2, d2) = (
  pairCompare cmpa (pairCompare cmpb (pairCompare cmpc cmpd)) (a1, (b1, (c1, d1))) (a2, (b2, (c2, d2))))\<close> 
  for  cmpa  :: " 'a \<Rightarrow> 'a \<Rightarrow> ordering " 
  and  cmpb  :: " 'b \<Rightarrow> 'b \<Rightarrow> ordering " 
  and  cmpc  :: " 'c \<Rightarrow> 'c \<Rightarrow> ordering " 
  and  cmpd  :: " 'd \<Rightarrow> 'd \<Rightarrow> ordering " 
  and  d1  :: " 'd " 
  and  c1  :: " 'c " 
  and  a1  :: " 'a " 
  and  b1  :: " 'b " 
  and  d2  :: " 'd " 
  and  c2  :: " 'c " 
  and  a2  :: " 'a " 
  and  b2  :: " 'b "


fun quadrupleLess  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'a*'b*'c*'d \<Rightarrow> 'a*'b*'c*'d \<Rightarrow> bool \<close>  where 
     \<open> quadrupleLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d (x1, x2, x3, x4) (y1, y2, y3, y4) = ( pairLess 
  (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_b
     (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_c
        dict_Basic_classes_Ord_d)) dict_Basic_classes_Ord_a (x1, (x2, (x3, x4))) (y1, (y2, (y3, y4))))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  x4  :: " 'd " 
  and  x3  :: " 'c " 
  and  x2  :: " 'b " 
  and  x1  :: " 'a " 
  and  y4  :: " 'd " 
  and  y3  :: " 'c " 
  and  y2  :: " 'b " 
  and  y1  :: " 'a "

fun quadrupleLessEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'a*'b*'c*'d \<Rightarrow> 'a*'b*'c*'d \<Rightarrow> bool \<close>  where 
     \<open> quadrupleLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d (x1, x2, x3, x4) (y1, y2, y3, y4) = ( pairLessEq 
  (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_b
     (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_c
        dict_Basic_classes_Ord_d)) dict_Basic_classes_Ord_a (x1, (x2, (x3, x4))) (y1, (y2, (y3, y4))))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  x4  :: " 'd " 
  and  x3  :: " 'c " 
  and  x2  :: " 'b " 
  and  x1  :: " 'a " 
  and  y4  :: " 'd " 
  and  y3  :: " 'c " 
  and  y2  :: " 'b " 
  and  y1  :: " 'a "


definition quadrupleGreater  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'd*'c*'b*'a \<Rightarrow> 'd*'c*'b*'a \<Rightarrow> bool \<close>  where 
     \<open> quadrupleGreater dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d x1234 y1234 = ( quadrupleLess 
  dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y1234 x1234 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  x1234  :: " 'd*'c*'b*'a " 
  and  y1234  :: " 'd*'c*'b*'a "

definition quadrupleGreaterEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'd*'c*'b*'a \<Rightarrow> 'd*'c*'b*'a \<Rightarrow> bool \<close>  where 
     \<open> quadrupleGreaterEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d x1234 y1234 = ( quadrupleLessEq 
  dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y1234 x1234 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  x1234  :: " 'd*'c*'b*'a " 
  and  y1234  :: " 'd*'c*'b*'a "


definition instance_Basic_classes_Ord_tup4_dict  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow>('a*'b*'c*'d)Ord_class \<close>  where 
     \<open> instance_Basic_classes_Ord_tup4_dict dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d = ((|

  compare_method = (quadrupleCompare 
  (compare_method   dict_Basic_classes_Ord_a) (compare_method   dict_Basic_classes_Ord_b) (compare_method   dict_Basic_classes_Ord_c) (compare_method   dict_Basic_classes_Ord_d)),

  isLess_method = 
  (quadrupleLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d),

  isLessEqual_method = 
  (quadrupleLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d),

  isGreater_method = 
  (quadrupleGreater dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c
     dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a),

  isGreaterEqual_method = 
  (quadrupleGreaterEq dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c
     dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a) |) )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class "


\<comment> \<open>\<open> quintuples \<close>\<close>

\<comment> \<open>\<open>val quintupleEqual : forall 'a 'b 'c 'd 'e. Eq 'a, Eq 'b, Eq 'c, Eq 'd, Eq 'e => ('a * 'b * 'c * 'd * 'e) -> ('a * 'b * 'c * 'd * 'e) -> bool\<close>\<close>
\<comment> \<open>\<open>let quintupleEqual (x1, x2, x3, x4, x5) (y1, y2, y3, y4, y5)=  ((Instance_Basic_classes_Eq_tup2.=) (x1, (x2, (x3, (x4, x5)))) (y1, (y2, (y3, (y4, y5)))))\<close>\<close>

\<comment> \<open>\<open>val quintupleCompare : forall 'a 'b 'c 'd 'e. ('a -> 'a -> ordering) -> ('b -> 'b -> ordering) -> ('c -> 'c -> ordering) ->
                                              ('d -> 'd -> ordering) -> ('e -> 'e -> ordering) -> ('a * 'b * 'c * 'd * 'e) -> ('a * 'b * 'c * 'd * 'e) -> ordering\<close>\<close>
fun quintupleCompare  :: \<open>('a \<Rightarrow> 'a \<Rightarrow> ordering)\<Rightarrow>('b \<Rightarrow> 'b \<Rightarrow> ordering)\<Rightarrow>('c \<Rightarrow> 'c \<Rightarrow> ordering)\<Rightarrow>('d \<Rightarrow> 'd \<Rightarrow> ordering)\<Rightarrow>('e \<Rightarrow> 'e \<Rightarrow> ordering)\<Rightarrow> 'a*'b*'c*'d*'e \<Rightarrow> 'a*'b*'c*'d*'e \<Rightarrow> ordering \<close>  where 
     \<open> quintupleCompare cmpa cmpb cmpc cmpd cmpe (a1, b1, c1, d1, e1) (a2, b2, c2, d2, e2) = (
  pairCompare cmpa (pairCompare cmpb (pairCompare cmpc (pairCompare cmpd cmpe))) (a1, (b1, (c1, (d1, e1)))) (a2, (b2, (c2, (d2, e2)))))\<close> 
  for  cmpa  :: " 'a \<Rightarrow> 'a \<Rightarrow> ordering " 
  and  cmpb  :: " 'b \<Rightarrow> 'b \<Rightarrow> ordering " 
  and  cmpc  :: " 'c \<Rightarrow> 'c \<Rightarrow> ordering " 
  and  cmpd  :: " 'd \<Rightarrow> 'd \<Rightarrow> ordering " 
  and  cmpe  :: " 'e \<Rightarrow> 'e \<Rightarrow> ordering " 
  and  e1  :: " 'e " 
  and  d1  :: " 'd " 
  and  c1  :: " 'c " 
  and  a1  :: " 'a " 
  and  b1  :: " 'b " 
  and  e2  :: " 'e " 
  and  d2  :: " 'd " 
  and  c2  :: " 'c " 
  and  a2  :: " 'a " 
  and  b2  :: " 'b "


fun quintupleLess  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'a*'b*'c*'d*'e \<Rightarrow> 'a*'b*'c*'d*'e \<Rightarrow> bool \<close>  where 
     \<open> quintupleLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e (x1, x2, x3, x4, x5) (y1, y2, y3, y4, y5) = ( pairLess 
  (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_b
     (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_c
        (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_d
           dict_Basic_classes_Ord_e))) dict_Basic_classes_Ord_a (x1, (x2, (x3, (x4, x5)))) (y1, (y2, (y3, (y4, y5)))))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  x5  :: " 'e " 
  and  x4  :: " 'd " 
  and  x3  :: " 'c " 
  and  x2  :: " 'b " 
  and  x1  :: " 'a " 
  and  y5  :: " 'e " 
  and  y4  :: " 'd " 
  and  y3  :: " 'c " 
  and  y2  :: " 'b " 
  and  y1  :: " 'a "

fun quintupleLessEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'a*'b*'c*'d*'e \<Rightarrow> 'a*'b*'c*'d*'e \<Rightarrow> bool \<close>  where 
     \<open> quintupleLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e (x1, x2, x3, x4, x5) (y1, y2, y3, y4, y5) = ( pairLessEq 
  (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_b
     (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_c
        (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_d
           dict_Basic_classes_Ord_e))) dict_Basic_classes_Ord_a (x1, (x2, (x3, (x4, x5)))) (y1, (y2, (y3, (y4, y5)))))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  x5  :: " 'e " 
  and  x4  :: " 'd " 
  and  x3  :: " 'c " 
  and  x2  :: " 'b " 
  and  x1  :: " 'a " 
  and  y5  :: " 'e " 
  and  y4  :: " 'd " 
  and  y3  :: " 'c " 
  and  y2  :: " 'b " 
  and  y1  :: " 'a "


definition quintupleGreater  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'e*'d*'c*'b*'a \<Rightarrow> 'e*'d*'c*'b*'a \<Rightarrow> bool \<close>  where 
     \<open> quintupleGreater dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e x12345 y12345 = ( quintupleLess 
  dict_Basic_classes_Ord_e dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y12345 x12345 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  x12345  :: " 'e*'d*'c*'b*'a " 
  and  y12345  :: " 'e*'d*'c*'b*'a "

definition quintupleGreaterEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'e*'d*'c*'b*'a \<Rightarrow> 'e*'d*'c*'b*'a \<Rightarrow> bool \<close>  where 
     \<open> quintupleGreaterEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e x12345 y12345 = ( quintupleLessEq 
  dict_Basic_classes_Ord_e dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y12345 x12345 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  x12345  :: " 'e*'d*'c*'b*'a " 
  and  y12345  :: " 'e*'d*'c*'b*'a "


definition instance_Basic_classes_Ord_tup5_dict  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow>('a*'b*'c*'d*'e)Ord_class \<close>  where 
     \<open> instance_Basic_classes_Ord_tup5_dict dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e = ((|

  compare_method = (quintupleCompare 
  (compare_method   dict_Basic_classes_Ord_a) (compare_method   dict_Basic_classes_Ord_b) (compare_method   dict_Basic_classes_Ord_c) (compare_method   dict_Basic_classes_Ord_d) (compare_method   dict_Basic_classes_Ord_e)),

  isLess_method = 
  (quintupleLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d
     dict_Basic_classes_Ord_e),

  isLessEqual_method = 
  (quintupleLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d
     dict_Basic_classes_Ord_e),

  isGreater_method = 
  (quintupleGreater dict_Basic_classes_Ord_e dict_Basic_classes_Ord_d
     dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_a),

  isGreaterEqual_method = 
  (quintupleGreaterEq dict_Basic_classes_Ord_e dict_Basic_classes_Ord_d
     dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_a) |) )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class "


\<comment> \<open>\<open> sextuples \<close>\<close>

\<comment> \<open>\<open>val sextupleEqual : forall 'a 'b 'c 'd 'e 'f. Eq 'a, Eq 'b, Eq 'c, Eq 'd, Eq 'e, Eq 'f => ('a * 'b * 'c * 'd * 'e * 'f) -> ('a * 'b * 'c * 'd * 'e * 'f) -> bool\<close>\<close>
\<comment> \<open>\<open>let sextupleEqual (x1, x2, x3, x4, x5, x6) (y1, y2, y3, y4, y5, y6)=  ((Instance_Basic_classes_Eq_tup2.=) (x1, (x2, (x3, (x4, (x5, x6))))) (y1, (y2, (y3, (y4, (y5, y6))))))\<close>\<close>

\<comment> \<open>\<open>val sextupleCompare : forall 'a 'b 'c 'd 'e 'f. ('a -> 'a -> ordering) -> ('b -> 'b -> ordering) -> ('c -> 'c -> ordering) ->
                                              ('d -> 'd -> ordering) -> ('e -> 'e -> ordering) -> ('f -> 'f -> ordering) ->
                                              ('a * 'b * 'c * 'd * 'e * 'f) -> ('a * 'b * 'c * 'd * 'e * 'f) -> ordering\<close>\<close>
fun sextupleCompare  :: \<open>('a \<Rightarrow> 'a \<Rightarrow> ordering)\<Rightarrow>('b \<Rightarrow> 'b \<Rightarrow> ordering)\<Rightarrow>('c \<Rightarrow> 'c \<Rightarrow> ordering)\<Rightarrow>('d \<Rightarrow> 'd \<Rightarrow> ordering)\<Rightarrow>('e \<Rightarrow> 'e \<Rightarrow> ordering)\<Rightarrow>('f \<Rightarrow> 'f \<Rightarrow> ordering)\<Rightarrow> 'a*'b*'c*'d*'e*'f \<Rightarrow> 'a*'b*'c*'d*'e*'f \<Rightarrow> ordering \<close>  where 
     \<open> sextupleCompare cmpa cmpb cmpc cmpd cmpe cmpf (a1, b1, c1, d1, e1, f1) (a2, b2, c2, d2, e2, f2) = (
  pairCompare cmpa (pairCompare cmpb (pairCompare cmpc (pairCompare cmpd (pairCompare cmpe cmpf)))) (a1, (b1, (c1, (d1, (e1, f1))))) (a2, (b2, (c2, (d2, (e2, f2))))))\<close> 
  for  cmpa  :: " 'a \<Rightarrow> 'a \<Rightarrow> ordering " 
  and  cmpb  :: " 'b \<Rightarrow> 'b \<Rightarrow> ordering " 
  and  cmpc  :: " 'c \<Rightarrow> 'c \<Rightarrow> ordering " 
  and  cmpd  :: " 'd \<Rightarrow> 'd \<Rightarrow> ordering " 
  and  cmpe  :: " 'e \<Rightarrow> 'e \<Rightarrow> ordering " 
  and  cmpf  :: " 'f \<Rightarrow> 'f \<Rightarrow> ordering " 
  and  f1  :: " 'f " 
  and  e1  :: " 'e " 
  and  d1  :: " 'd " 
  and  c1  :: " 'c " 
  and  a1  :: " 'a " 
  and  b1  :: " 'b " 
  and  f2  :: " 'f " 
  and  e2  :: " 'e " 
  and  d2  :: " 'd " 
  and  c2  :: " 'c " 
  and  a2  :: " 'a " 
  and  b2  :: " 'b "


fun sextupleLess  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'f Ord_class \<Rightarrow> 'a*'b*'c*'d*'e*'f \<Rightarrow> 'a*'b*'c*'d*'e*'f \<Rightarrow> bool \<close>  where 
     \<open> sextupleLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e dict_Basic_classes_Ord_f (x1, x2, x3, x4, x5, x6) (y1, y2, y3, y4, y5, y6) = ( pairLess 
  (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_b
     (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_c
        (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_d
           (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_e
              dict_Basic_classes_Ord_f)))) dict_Basic_classes_Ord_a (x1, (x2, (x3, (x4, (x5, x6))))) (y1, (y2, (y3, (y4, (y5, y6))))))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  dict_Basic_classes_Ord_f  :: " 'f Ord_class " 
  and  x6  :: " 'f " 
  and  x5  :: " 'e " 
  and  x4  :: " 'd " 
  and  x3  :: " 'c " 
  and  x2  :: " 'b " 
  and  x1  :: " 'a " 
  and  y6  :: " 'f " 
  and  y5  :: " 'e " 
  and  y4  :: " 'd " 
  and  y3  :: " 'c " 
  and  y2  :: " 'b " 
  and  y1  :: " 'a "

fun sextupleLessEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'f Ord_class \<Rightarrow> 'a*'b*'c*'d*'e*'f \<Rightarrow> 'a*'b*'c*'d*'e*'f \<Rightarrow> bool \<close>  where 
     \<open> sextupleLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e dict_Basic_classes_Ord_f (x1, x2, x3, x4, x5, x6) (y1, y2, y3, y4, y5, y6) = ( pairLessEq 
  (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_b
     (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_c
        (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_d
           (instance_Basic_classes_Ord_tup2_dict dict_Basic_classes_Ord_e
              dict_Basic_classes_Ord_f)))) dict_Basic_classes_Ord_a (x1, (x2, (x3, (x4, (x5, x6))))) (y1, (y2, (y3, (y4, (y5, y6))))))\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  dict_Basic_classes_Ord_f  :: " 'f Ord_class " 
  and  x6  :: " 'f " 
  and  x5  :: " 'e " 
  and  x4  :: " 'd " 
  and  x3  :: " 'c " 
  and  x2  :: " 'b " 
  and  x1  :: " 'a " 
  and  y6  :: " 'f " 
  and  y5  :: " 'e " 
  and  y4  :: " 'd " 
  and  y3  :: " 'c " 
  and  y2  :: " 'b " 
  and  y1  :: " 'a "


definition sextupleGreater  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'f Ord_class \<Rightarrow> 'f*'e*'d*'c*'b*'a \<Rightarrow> 'f*'e*'d*'c*'b*'a \<Rightarrow> bool \<close>  where 
     \<open> sextupleGreater dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e dict_Basic_classes_Ord_f x123456 y123456 = ( sextupleLess 
  dict_Basic_classes_Ord_f dict_Basic_classes_Ord_e dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y123456 x123456 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  dict_Basic_classes_Ord_f  :: " 'f Ord_class " 
  and  x123456  :: " 'f*'e*'d*'c*'b*'a " 
  and  y123456  :: " 'f*'e*'d*'c*'b*'a "

definition sextupleGreaterEq  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'f Ord_class \<Rightarrow> 'f*'e*'d*'c*'b*'a \<Rightarrow> 'f*'e*'d*'c*'b*'a \<Rightarrow> bool \<close>  where 
     \<open> sextupleGreaterEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e dict_Basic_classes_Ord_f x123456 y123456 = ( sextupleLessEq 
  dict_Basic_classes_Ord_f dict_Basic_classes_Ord_e dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a y123456 x123456 )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  dict_Basic_classes_Ord_f  :: " 'f Ord_class " 
  and  x123456  :: " 'f*'e*'d*'c*'b*'a " 
  and  y123456  :: " 'f*'e*'d*'c*'b*'a "


definition instance_Basic_classes_Ord_tup6_dict  :: \<open> 'a Ord_class \<Rightarrow> 'b Ord_class \<Rightarrow> 'c Ord_class \<Rightarrow> 'd Ord_class \<Rightarrow> 'e Ord_class \<Rightarrow> 'f Ord_class \<Rightarrow>('a*'b*'c*'d*'e*'f)Ord_class \<close>  where 
     \<open> instance_Basic_classes_Ord_tup6_dict dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d dict_Basic_classes_Ord_e dict_Basic_classes_Ord_f = ((|

  compare_method = (sextupleCompare 
  (compare_method   dict_Basic_classes_Ord_a) (compare_method   dict_Basic_classes_Ord_b) (compare_method   dict_Basic_classes_Ord_c) (compare_method   dict_Basic_classes_Ord_d) (compare_method   dict_Basic_classes_Ord_e) (compare_method   dict_Basic_classes_Ord_f)),

  isLess_method = 
  (sextupleLess dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d
     dict_Basic_classes_Ord_e dict_Basic_classes_Ord_f),

  isLessEqual_method = 
  (sextupleLessEq dict_Basic_classes_Ord_a dict_Basic_classes_Ord_b
     dict_Basic_classes_Ord_c dict_Basic_classes_Ord_d
     dict_Basic_classes_Ord_e dict_Basic_classes_Ord_f),

  isGreater_method = 
  (sextupleGreater dict_Basic_classes_Ord_f dict_Basic_classes_Ord_e
     dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c
     dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a),

  isGreaterEqual_method = 
  (sextupleGreaterEq dict_Basic_classes_Ord_f dict_Basic_classes_Ord_e
     dict_Basic_classes_Ord_d dict_Basic_classes_Ord_c
     dict_Basic_classes_Ord_b dict_Basic_classes_Ord_a) |) )\<close> 
  for  dict_Basic_classes_Ord_a  :: " 'a Ord_class " 
  and  dict_Basic_classes_Ord_b  :: " 'b Ord_class " 
  and  dict_Basic_classes_Ord_c  :: " 'c Ord_class " 
  and  dict_Basic_classes_Ord_d  :: " 'd Ord_class " 
  and  dict_Basic_classes_Ord_e  :: " 'e Ord_class " 
  and  dict_Basic_classes_Ord_f  :: " 'f Ord_class "

end
